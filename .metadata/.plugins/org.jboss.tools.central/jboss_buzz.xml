<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>How to install Python 3 on RHEL</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xp5SwaTg8-8/" /><category term="Python" /><category term="Red Hat Enterprise Linux" /><category term="Red Hat Software Collections" /><category term="python" /><category term="RHEL" /><category term="RHSCL" /><category term="virtualenv" /><author><name>Rob Terzi</name></author><id>https://developers.redhat.com/blog/?p=512967</id><updated>2018-08-13T11:00:46Z</updated><published>2018-08-13T11:00:46Z</published><content type="html">&lt;p&gt;This article shows how to install Python 3, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;venv&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, and &lt;code&gt;pipenv&lt;/code&gt; on &lt;a href="https://developers.redhat.com/products/rhel/overview/"&gt;Red Hat Enterprise Linux&lt;/a&gt; 7. After following the steps in this article, you should be in a good position to follow many Python guides and tutorials using RHEL.&lt;/p&gt; &lt;p&gt;Using Python virtual environments is a best practice to isolate project-specific dependencies and create reproducible environments. Other tips and FAQs for working with Python and software collections on RHEL 7 are also covered.&lt;/p&gt; &lt;p&gt;There are a number of different ways to get Python 3 installed on RHEL. This article uses Red Hat Software Collections because these give you a current Python installation that is built and supported by Red Hat. During development, support might not seem that important to you. However, support is important to those who have to deploy and operate the applications you write. To understand why this is important, consider what happens when your application is in production and a critical security vulnerability in a core library (for example SSL/TLS) is discovered. This type of scenario is why many enterprises use Red Hat.&lt;/p&gt; &lt;p&gt;Python 3.6 is used in this article. It was the most recent, stable release when this was written. However, you should be able to use these instructions for any of the versions of Python in Red Hat Software Collections including 2.7, 3.4, 3.5, and future collections such as 3.7.&lt;/p&gt; &lt;p&gt;&lt;span id="more-512967"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;In this article, the following topics are discussed:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;TL;DR (summary of steps)&lt;/li&gt; &lt;li&gt;Full installation steps with explanations&lt;/li&gt; &lt;li&gt;How to use Python 3 through Red Hat Software Collections&lt;/li&gt; &lt;li&gt;Working with Python virtual environments &lt;ol&gt; &lt;li&gt;using &lt;code&gt;venv&lt;/code&gt;&lt;/li&gt; &lt;li&gt;using &lt;code&gt;virtualenv&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Managing application dependencies using &lt;code&gt;pipenv&lt;/code&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;General tips for working with Python&lt;/li&gt; &lt;li&gt;Tips for working with software collections&lt;/li&gt; &lt;li&gt;More information: Developing in Python on Red Hat Platforms&lt;/li&gt; &lt;li&gt;Troubleshooting&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;TL;DR&lt;/h2&gt; &lt;p&gt;Here are the basic steps so you can just get going. See below for explanations and more details.&lt;/p&gt; &lt;h3&gt;How to install Python 3 on RHEL&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;Become &lt;code&gt;root&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Enable the &lt;code&gt;rhscl&lt;/code&gt; and &lt;code&gt;optional&lt;/code&gt; software repos using &lt;code&gt;subscription-manager&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Use &lt;code&gt;yum&lt;/code&gt; to install &lt;code&gt;@development&lt;/code&gt;. This makes sure you’ve got GCC, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, etc. so you can build any modules that contain compiled code.&lt;/li&gt; &lt;li&gt;Use &lt;code&gt;yum&lt;/code&gt; to install &lt;code&gt;rh-python36&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Optional: Use &lt;code&gt;yum&lt;/code&gt; to install &lt;code&gt;python-tools&lt;/code&gt;, &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;scipy&lt;/code&gt;, and &lt;code&gt;six&lt;/code&gt; from RHSCL RPMs.&lt;/li&gt; &lt;/ol&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ su - # subscription-manager repos --enable rhel-7-server-optional-rpms \ --enable rhel-server-rhscl-7-rpms # yum -y install @development # yum -y install rh-python36 # yum -y install rh-python36-numpy \ rh-python36-scipy \ rh-python36-python-tools \ rh-python36-python-six # exit &lt;/pre&gt; &lt;h3&gt;Using Python 3 on RHEL&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;Under your normal user ID, run &lt;code&gt;scl enable&lt;/code&gt; to add &lt;code&gt;python 3&lt;/code&gt; to your path(s).&lt;/li&gt; &lt;li&gt;Create a Python virtual environment and activate it.  (Note: your prompt has changed to show the virtual environment.)&lt;/li&gt; &lt;li&gt;Install whatever additional modules you need with &lt;code&gt;pip&lt;/code&gt; in an isolated environment without being &lt;code&gt;root&lt;/code&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ python3 -V Python 3.6.3 $ python -V # python now also points to Python3 Python 3.6.3 $ mkdir ~/pydev $ cd ~/pydev $ python3 -m venv py36-venv $ source py36-env/bin/activate (py36-venv) $ python3 -m pip install ...some modules... &lt;/pre&gt; &lt;p&gt;If you start a new session, here are the steps for using your virtual environment:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ cd ~/pydev $ source py36-env/bin/activate &lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;Why use Red Hat Software Collections&lt;/h2&gt; &lt;p&gt;The benefit of using Red Hat Software Collections is that you can have multiple versions of Python installed at the same time along with the base Python 2.7 that shipped with RHEL 7. You can easily switch between versions with &lt;code&gt;scl enable&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Note: The latest stable packages for .Net Core, Go, Rust, PHP 7, Ruby 2.5, GCC, Clang/LLVM, Nginx, MongoDB, MariaDB, PostgreSQL, and more are all &lt;code&gt;yum&lt;/code&gt;&amp;#8211; installable as software collections. So you should take the time to get comfortable with software collections.&lt;/p&gt; &lt;p&gt;Using software collections requires an extra step because you have to enable the collection you want to use. Enabling just adds the necessary paths (&lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;MANPATH&lt;/code&gt;, &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;) to your environment. Once you get the hang of it, software collections are fairly easy to use. It really helps to understand the way that environment-variable changes work in Linux/UNIX. Changes can be made only to the current process. When a child process is created, it inherits the environment of the parent. Any environment changes made in the parent after the child has been created will have no effect on the child. Therefore, the changes made by &lt;code&gt;scl enable&lt;/code&gt; will affect only the current terminal session or anything started from it. This article also shows how you can permanently enable a software collection for your user account.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;Installation Prerequisites&lt;/h2&gt; &lt;h3&gt;Install development tools including GCC, make, and git&lt;/h3&gt; &lt;p&gt;If you install modules that depend on compiled code you&amp;#8217;ll need the tools to compile them. If you haven&amp;#8217;t already installed development tools run the following command:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ su - # yum install @development &lt;/pre&gt; &lt;h3&gt;Enable repos with additional developer tools&lt;/h3&gt; &lt;p&gt;While the default/base RHEL software repos have many development tools, these are the older versions that are shipped with the OS and are supported for the full 10-year life of the OS. Packages that are updated more frequently and have a different support lifecycle are distributed in other repos that aren’t enabled by default.&lt;/p&gt; &lt;p&gt;Red Hat Software Collections are in the &lt;code&gt;rhscl&lt;/code&gt; repo. RHSCL packages have some dependencies on packages in the &lt;code&gt;optional-rpms&lt;/code&gt; repo, so you need to enable both.&lt;/p&gt; &lt;p&gt;To enable the additional repos, run the following commands as &lt;code&gt;root&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ su - # subscription-manager repos \ --enable rhel-7-server-optional-rpms \ --enable rhel-server-rhscl-7-rpms &lt;/pre&gt; &lt;p&gt;Notes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;You can enter the above all on one line &lt;strong&gt;without the backslashes&lt;/strong&gt;.  The backslashes are needed if you want to use multiple lines for readability.&lt;/li&gt; &lt;li&gt;If you are using the &lt;em&gt;workstation&lt;/em&gt; variant of RHEL, change &lt;code&gt;-server-&lt;/code&gt; to &lt;code&gt;-workstation-&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;This command needs to be run only once.  The repos will stay enabled. All of the enabled repos will be searched by &lt;code&gt;yum&lt;/code&gt; when installing or updating software.&lt;/li&gt; &lt;li&gt;The &lt;a href="https://developers.redhat.com/products/rhel/overview/"&gt;no-cost RHEL subscription for developers&lt;/a&gt; includes access to all of these repos and the &lt;em&gt;server&lt;/em&gt; variant of RHEL.  The &lt;em&gt;server&lt;/em&gt; variant is a superset.&lt;/li&gt; &lt;li&gt;For more information, see the &lt;a href="https://developers.redhat.com/articles/frequently-asked-questions-no-cost-red-hat-enterprise-linux-developer-subscription/"&gt;FAQ for the no-cost subscription&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To see which repos are available for your current subscription, run the following command:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # subscription-manager repos --list &lt;/pre&gt; &lt;p&gt;To see which repos are enabled, use &lt;code&gt;--list-enabled&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # subscription-manager repos --list-enabled &lt;/pre&gt; &lt;hr /&gt; &lt;h2&gt;Install Python 3&lt;/h2&gt; &lt;p&gt;You can now install Python 3.6 (or other versions in RHSCL) with &lt;code&gt;yum&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # yum install rh-python36 &lt;/pre&gt; &lt;p&gt;Notes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;These packages will install in &lt;code&gt;/opt/rh/&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;They will not be added to your path until you run &lt;code&gt;scl enable&lt;/code&gt;.  See below.&lt;/li&gt; &lt;li&gt;For other versions of Python, use the following as the package/collection name:&lt;br /&gt; Python 3.5: &lt;code&gt;rh-python35&lt;/code&gt;&lt;br /&gt; Python 3.4: &lt;code&gt;rh-python34&lt;/code&gt;&lt;br /&gt; Python 2.7.13: &lt;code&gt;python27&lt;/code&gt;&lt;/li&gt; &lt;li&gt;A number of additional packages will be installed as dependencies. These include &lt;code&gt;python-devel&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;setuptools&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;python-devel&lt;/code&gt; package contains the files needed if you have to build any modules that dynamically link into Python (such as C/C++ code).&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Install additional packages&lt;/h3&gt; &lt;p&gt;Optionally, you may want to install the following RPM packages that are part of the software collection:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Python tools: &lt;code&gt;rh-python36-python-tools&lt;/code&gt; is a collection of tools included with Python 3,  &lt;code&gt;2to3&lt;/code&gt;, and &lt;code&gt;idle3&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Numpy: &lt;code&gt;rh-python36-numpy&lt;/code&gt; is a fast multidimensional array facility for Python.&lt;/li&gt; &lt;li&gt;Scipy: &lt;code&gt;rh-python36-scipy&lt;/code&gt; provides scientific tools for Python.&lt;/li&gt; &lt;li&gt;Six: &lt;code&gt;rh-python36-python-six&lt;/code&gt;  provides Python 2 and 3 compatible utilities.&lt;/li&gt; &lt;li&gt;Sqlalchemy: &lt;code&gt;rh-python36-python-sqlalchemy&lt;/code&gt; is a modular and flexible ORM library for Python.&lt;/li&gt; &lt;li&gt;PyYAML: &lt;code&gt;rh-python36-PyYAML&lt;/code&gt; is a YAML parser and emitter for Python.&lt;/li&gt; &lt;li&gt;Simplejson: &lt;code&gt;rh-python36-python-simplejson&lt;/code&gt; is a simple, fast, extensible JSON encoder/decoder for Python.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # yum install rh-python36-numpy \ rh-python36-scipy \ rh-python36-python-tools \ rh-python36-python-six &lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;Note: By default system modules will not be used with Python virtual environments. Use the option &lt;code&gt;--system-site-packages&lt;/code&gt; when creating the virtual environment to include system modules.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;How to use Python 3 (&lt;code&gt;scl enable&lt;/code&gt;)&lt;/h2&gt; &lt;p&gt;Python 3 is now installed. You no longer need to run under the &lt;code&gt;root&lt;/code&gt; user ID. The rest of the commands should be executed using your normal user account.&lt;/p&gt; &lt;p&gt;As previously mentioned, software collections are installed under &lt;code&gt;/opt/rh&lt;/code&gt; and aren’t automatically added to your &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;MANPATH&lt;/code&gt;, and &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;. The command &lt;code&gt;scl enable&lt;/code&gt; will make the necessary changes and run a command. Because of the way environment variables work in Linux (and UNIX), the changes will take effect only for the command run by scl&lt;code&gt; enable&lt;/code&gt;. You can use &lt;code&gt;bash&lt;/code&gt; as the command to start an interactive session. This is one of the most common ways (but not the only way) of working with software collections.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ python3 -V Python 3.6.3 $ python -V # python now points to Python 3 Python 3.6.3 $ which python /opt/rh/rh-python36/root/usr/bin/python &lt;/pre&gt; &lt;p&gt;Note: Enabling the Python collection makes the &lt;code&gt;python&lt;/code&gt; in your path, with no version number, point to Python 3. &lt;code&gt;/usr/bin/python&lt;/code&gt; will still be Python 2. You can still run Python 2 by typing &lt;code&gt;python2&lt;/code&gt;, &lt;code&gt;python2.7&lt;/code&gt;, or &lt;code&gt;/usr/bin/python&lt;/code&gt;. It is recommended that you use a version number to avoid any ambiguity about what &lt;code&gt;python&lt;/code&gt; means. This also applies to other Python commands in &lt;code&gt;.../bin&lt;/code&gt; such as  &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pydoc&lt;/code&gt;, &lt;code&gt;python-config&lt;/code&gt;,  &lt;code&gt;pyvenv&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt;. For more information, see &lt;a href="https://www.python.org/dev/peps/pep-0394/"&gt;PEP 394&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;NOTE: See &lt;em&gt;How to permanently enable a software collection&lt;/em&gt; below to permanently put Python 3 in your path.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;Create a Python virtual environment (best practice)&lt;/h2&gt; &lt;p&gt;Using Python virtual environments is a best practice to isolate project-specific dependencies and create reproducible environments. In other words, it’s a way to avoid conflicting dependencies that lead to dependency hell. Using a virtual environment will let you use &lt;code&gt;pip&lt;/code&gt; to install whatever modules you need for your project in an isolated directory under your normal user ID.  You can easily have multiple projects with different dependencies. To work on a specific project, you activate the virtual environment, which adds the right directories to your path(s).&lt;/p&gt; &lt;p&gt;Using virtual environments along with &lt;code&gt;pip list&lt;/code&gt;, &lt;code&gt;pip freeze&lt;/code&gt;, and a &lt;code&gt;requirements.txt&lt;/code&gt; file gives you a path to a reproducible environment to run your code it.  Others that need to run your code can use the &lt;code&gt;requirements.txt&lt;/code&gt; file you generate to create a matching environment.&lt;/p&gt; &lt;p&gt;By default, virtual environments will not use any system installed modules, or modules installed under your home directory. From an isolation perspective and for creating reproducible environments this is generally considered the correct behavior. However, you can change that by using the argument &lt;code&gt;--system-site-packages&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Should I use &lt;code&gt;venv&lt;/code&gt; or &lt;code&gt;virtualenv&lt;/code&gt; or something else?&lt;/h3&gt; &lt;p&gt;When you install Python 3 from Red Hat Software Collections, &lt;code&gt;venv&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, and &lt;code&gt;pip&lt;/code&gt; will be installed, so you are ready to install whatever modules you choose. &amp;#8220;&lt;a href="https://docs.python.org/3/installing/index.html#installing-index"&gt;Installing Python Modules&lt;/a&gt;&amp;#8221; in the current Python documentation says this:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;venv&lt;/code&gt; is the standard tool for creating virtual environments, and has been part of Python since Python 3.3.&lt;/li&gt; &lt;li&gt;&lt;code&gt;virtualenv&lt;/code&gt; is a third-party alternative (and predecessor) to &lt;code&gt;venv&lt;/code&gt;. It allows virtual environments to be used on versions of Python prior to 3.4, which either don’t provide &lt;code&gt;venv&lt;/code&gt; at all or aren’t able to automatically install &lt;code&gt;pip&lt;/code&gt; into created environments.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;So for all the recent versions of Python 3, &lt;code&gt;venv&lt;/code&gt; &lt;strong&gt;is preferred&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;If you work with Python 2.7, you’ll need to use &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The commands to create the virtual environments differ only in the module name used. Once created, the command to activate the virtual environment is the same.&lt;/p&gt; &lt;p&gt;Note: for &lt;code&gt;virtualenv&lt;/code&gt;, using &lt;code&gt;python3.6 -m virtualenv&lt;/code&gt; is recommended instead of using the &lt;code&gt;virtualenv&lt;/code&gt; command. See &lt;em&gt;Avoid using Python wrapper scripts&lt;/em&gt; below for more information.&lt;/p&gt; &lt;h3&gt;Create and activate a virtual environment with &lt;code&gt;venv&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;If you haven’t already done so, enable the &lt;code&gt;rh-python36&lt;/code&gt; collection:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash &lt;/pre&gt; &lt;p&gt;Now create the virtual environment. To avoid any surprises, use an explicit version number for running Python:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ python3.6 -m venv myproject1 &lt;/pre&gt; &lt;p&gt;Anytime you need to activate the virtual environment, run the following command.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ source myproject1/bin/activate &lt;/pre&gt; &lt;p&gt;Note: once you’ve activated a virtual environment, your prompt will change to remind you that you are working in a virtual environment.  Example:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; (myproject1) $ &lt;/pre&gt; &lt;p&gt;Note: When you log in again, or start a new session, you will need to activate the virtual environment using the &lt;code&gt;source&lt;/code&gt; command again. Note: you should already have run &lt;code&gt;scl enable&lt;/code&gt; before activating the virtual environment.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href="https://docs.python.org/3/tutorial/venv.html"&gt;Virtual Environments and Packages&lt;/a&gt; in the &lt;a href="https://docs.python.org/3/tutorial/"&gt;Python 3 tutorial&lt;/a&gt; at &lt;a href="http://docs.python.org"&gt;docs.python.org&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h3&gt;Create and activate a virtual environment with &lt;code&gt;virtualenv&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;If you haven’t already done so, enable the &lt;code&gt;rh-python36&lt;/code&gt; collection:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash &lt;/pre&gt; &lt;p&gt;Now create the virtual environment. To avoid any surprises, use an explicit version number for running Python:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ python3.6 -m virtualenv myproject1 &lt;/pre&gt; &lt;p&gt;Anytime you need to activate the virtual environment, run the following command. Note: you should already have run &lt;code&gt;scl enable&lt;/code&gt; before activating the virtual environment.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ source myproject1/bin/activate &lt;/pre&gt; &lt;p&gt;Note: once you’ve activated a virtual environment, your prompt will change to remind you that you are working in a virtual environment.  Example:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; (myproject1) $ &lt;/pre&gt; &lt;p&gt;Note: When you log in again, or start a new session, you will need to activate the virtual environment using the &lt;code&gt;source&lt;/code&gt; command again. Note: you should already have run &lt;code&gt;scl enable&lt;/code&gt; before activating the virtual environment.&lt;/p&gt; &lt;p&gt;For more information, see &lt;em&gt;&lt;a href="https://packaging.python.org/guides/installing-using-pip-and-virtualenv/"&gt;Installing packages using pip and virtualenv&lt;/a&gt;&lt;/em&gt; in the &lt;a href="https://packaging.python.org/"&gt;&lt;em&gt;Python Packaging User Guide&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h3&gt;Managing application dependencies with &lt;code&gt;pipenv&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;From the &lt;a href="https://packaging.python.org/"&gt;&lt;em&gt;Python Packaging User Guide&lt;/em&gt;&lt;/a&gt;  tutorial, &lt;em&gt;&lt;a href="https://packaging.python.org/tutorials/managing-dependencies/"&gt;Managing Application Dependencies&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt; &lt;p style="padding-left: 30px;"&gt;“&lt;a href="https://packaging.python.org/key_projects/#pipenv"&gt;Pipenv&lt;/a&gt; is a dependency manager for Python projects. If you’re familiar with Node.js’ npm or Ruby’s &lt;a href="http://bundler.io/"&gt;bundler&lt;/a&gt;, it is similar in spirit to those tools. While &lt;a href="https://packaging.python.org/key_projects/#pip"&gt;pip&lt;/a&gt; alone is often sufficient for personal use, Pipenv is recommended for collaborative projects as it’s a higher-level tool that simplifies dependency management for common use cases.”&lt;/p&gt; &lt;p&gt;With pipenv you no longer need to use &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt; separately.  &lt;code&gt;pipenv&lt;/code&gt; isn’t currently part of the standard Python 3 library or Red Hat Software Colleciton. You can install it using &lt;code&gt;pip&lt;/code&gt;. (Note: see the recommendation below about not running &lt;code&gt;pip install&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt;.) Since &lt;code&gt;pipenv&lt;/code&gt; uses &lt;code&gt;virtualenv&lt;/code&gt; to manage environments, you should install &lt;code&gt;pipenv&lt;/code&gt; &lt;strong&gt;without&lt;/strong&gt; having any virtual environment activated. However, don’t forget to enable the Python 3 software collection first.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash # if you haven’t already done so $ python3.6 -m pip install --user pipenv &lt;/pre&gt; &lt;p&gt;Creating and using isolated environments with &lt;code&gt;pipenv&lt;/code&gt; works a bit differently than &lt;code&gt;venv&lt;/code&gt; or &lt;code&gt;virtualenv&lt;/code&gt;.  A virtual environment will automatically be created if no &lt;code&gt;Pipfile&lt;/code&gt; exists in the current directory when you install the first package. However, it&amp;#8217;s a good practice to explicitly create an environment with the specific version of Python you want to use.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash # if you haven’t already done so $ mkdir -p ~/pydev/myproject2 $ cd ~/pydev/myproject2 $ pipenv --python 3.6 $ pipenv install requests &lt;/pre&gt; &lt;p&gt;To activate a Pipenv environment, cd into that directory and run &lt;code&gt;pipenv shell&lt;/code&gt;.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash # if you haven’t already done so $ cd ~/pydev/myproject2 $ pipenv shell &lt;/pre&gt; &lt;p&gt;Pipenv is similar to &lt;code&gt;scl enable&lt;/code&gt; in that it doesn&amp;#8217;t try to modify the current environment with &lt;code&gt;source&lt;/code&gt;, instead it starts a new shell.  To deactivate, &lt;code&gt;exit&lt;/code&gt; the shell. You can also run a command in the pipenv environment by using &lt;code&gt;pipenv run command&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;&lt;a href="https://packaging.python.org/tutorials/managing-dependencies/"&gt;Managing Application Dependencies&lt;/a&gt;&lt;/em&gt; in the &lt;a href="https://packaging.python.org/"&gt;&lt;em&gt;Python Packaging User Guide&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;The &lt;a href="https://docs.pipenv.org/"&gt;documentation&lt;/a&gt; at &lt;a href="http://pipenv.org/"&gt;Pipenv.org&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;&lt;a href="https://docs.python-guide.org/dev/virtualenvs/"&gt;Pipenv and Virtual Environments&lt;/a&gt; &lt;/em&gt;at &lt;a href="https://docs.python-guide.org/"&gt;The Hitchhiker’s Guide to Python&lt;/a&gt; website&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;General tips for working with Python&lt;/h2&gt; &lt;h3&gt;The &lt;code&gt;python&lt;/code&gt; command: Avoid surprises by using a version number&lt;/h3&gt; &lt;p&gt;To avoid surprises, don’t type &lt;code&gt;python&lt;/code&gt;. Use an explicit version number in the command, such as &lt;code&gt;python3.6&lt;/code&gt; or &lt;code&gt;python2.7&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;At a minimum, always use &lt;code&gt;python3&lt;/code&gt; or &lt;code&gt;python2&lt;/code&gt;. If you are reading this article, you’ve got more than one version of Python installed on your system. Depending on your path, you might get different versions. Activating and deactivating virtual environments, as well as enabling a software collection, changes your path, so it can be easy to be confused about what version you’ll get from typing &lt;code&gt;python&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The same problem occurs with any of the Python utilities such as &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;pydoc&lt;/code&gt;. Using version numbers, for example, &lt;code&gt;pip3.6&lt;/code&gt;,  is recommended. At a minimum use the major version number: &lt;code&gt;pip3&lt;/code&gt;. See the next section for a more robust alternative.&lt;/p&gt; &lt;h3&gt;Use &lt;code&gt;which&lt;/code&gt; to determine which Python version will be run&lt;/h3&gt; &lt;p&gt;Use the &lt;code&gt;which&lt;/code&gt; command to determine the full path that will be used when you type a command. This will help you understand which version of &lt;code&gt;python&lt;/code&gt; is in your path first and will get run when you type &lt;code&gt;python&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Examples:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ which python # before scl enable /usr/bin/python $ scl enable rh-python36 bash $ which python /opt/rh/rh-python36/root/usr/bin/python $ source ~/pydev/myproject1/bin/activate (myproject1) $ which python ~/pydev/myproject1/bin/python &lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Avoid Python wrapper scripts such as &lt;code&gt;virtualenv&lt;/code&gt;: Use the module name&lt;/h3&gt; &lt;p&gt;Some Python utilities are put in your path as a wrapper script in a &lt;code&gt;.../bin&lt;/code&gt; directory. This is convenient because you can just type &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;virtualenv.&lt;/code&gt;  Most Python utilities are actually just Python modules with wrapper scripts to start Python and run the code in the module.&lt;/p&gt; &lt;p&gt;The problem with wrapper scripts is the same ambiguity that happens when typing &lt;code&gt;python&lt;/code&gt;. Which version of &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;virtualenv&lt;/code&gt; you will get when you type the command without a version number? For things to work correctly, there is the additional complication that the utility needs to match the version of Python you intend to be using. Some subtle (hard to diagnose) problems can occur if you wind up unintentionally mixing versions.&lt;/p&gt; &lt;p&gt;Note: There are several directories that wrapper scripts can reside in. Which version you get is dependent on your path, which changes when you enable software collections and/or activate virtual environments. Modules installed with &lt;code&gt;pip --user&lt;/code&gt; put their wrapper scripts in &lt;code&gt;~/.local/bin&lt;/code&gt;, which can get obscured by activating the software collection or a virtual environment.&lt;/p&gt; &lt;p&gt;You can avoid the surprises from the path issues by running the module directly from a specific version of Python by using &lt;code&gt;-m &lt;/code&gt;modulename. While this involves more typing, it is a much safer approach.&lt;/p&gt; &lt;p&gt;Recommendations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Instead of &lt;code&gt;pip&lt;/code&gt;, use &lt;code&gt;python3.6 -m pip&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Instead of &lt;code&gt;pyvenv&lt;/code&gt;, use &lt;code&gt;python3.6 -m venv&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Instead of &lt;code&gt;virtualenv&lt;/code&gt;, use &lt;code&gt;python3.6 -m virtualenv&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h3&gt;Do not run &lt;code&gt;pip install&lt;/code&gt; as root (or with &lt;code&gt;sudo&lt;/code&gt;)&lt;/h3&gt; &lt;p&gt;Running &lt;code&gt;pip install&lt;/code&gt; as root either directly or by using &lt;code&gt;sudo&lt;/code&gt; is a bad idea and &lt;strong&gt;will cause you problems&lt;/strong&gt; at some point. Some of the problems that you may encounter are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Conflicts between the RPM packages and &lt;code&gt;pip&lt;/code&gt; installed packages. The conflicts will most likely show up when you need to install a fixed or upgraded package or module. The install might fail or, worse, you may wind up with a broken installation.  It’s best to let &lt;code&gt;yum&lt;/code&gt; be the exclusive manager of the files in the system directories.&lt;/li&gt; &lt;li&gt;Runtime environments that can’t be easily reproduced. It can be difficult to determine which modules were installed via an RPM package or via &lt;code&gt;pip&lt;/code&gt;.  When you want to run your Python code on another system, what needs to be installed? Does it need to be installed system-wide? Will you get the same version of the modules you tested your code under?&lt;/li&gt; &lt;li&gt;Upgrading modules to solve one dependency can break some other code. Unfortunately, there are many cases where code needs a specific version of a module and newer versions might be incompatible. Running &lt;code&gt;pip install&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt; means all modules get installed in a system-wide directory, making it hard to determine which modules were installed for a specific application.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Using virtual environments will allow you to isolate the modules you install for each project from the modules that are part of the Python installation from Red Hat. Using virtual environments is considered a best practice to create isolated environments that provide the dependencies needed for a specific purpose. You don’t need to use &lt;code&gt;--user&lt;/code&gt; when running &lt;code&gt;pip&lt;/code&gt; in a virtual environment since it will default to installing in the virtual environment, which you should have write access to.&lt;/p&gt; &lt;p&gt;If you aren&amp;#8217;t using virtual environments, or need a module/tool to be available outside of a virtual environments, use &lt;code&gt;pip --user&lt;/code&gt; to install modules under your home directory.&lt;/p&gt; &lt;p&gt;In case you think this is overly dire, see this &lt;a href="https://xkcd.com/1987/"&gt;xkcd comic&lt;/a&gt;. Don’t forget to hover so you see the alt text.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Use virtual environments instead of &lt;code&gt;pip --user&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;Some guides recommend using &lt;code&gt;pip --user&lt;/code&gt;. While this is preferred over running &lt;code&gt;pip&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt;, using virtual environments is much better practice for properly isolating the modules you need for a given project or set of projects. &lt;code&gt;pip --user&lt;/code&gt; installs use &lt;code&gt;~/.local&lt;/code&gt;, which can be obscured by enabling software collections and/or activating virtual environments. For modules that install wrapper scripts in &lt;code&gt;~/.local/bin&lt;/code&gt;, this can cause a mismatch between the wrapper script and the module.&lt;/p&gt; &lt;p&gt;The exception to this advice is modules and tools that you need to use outside of virtual environments. The primary example is &lt;code&gt;pipenv&lt;/code&gt;.  You should use &lt;code&gt;pip install --user pipenv&lt;/code&gt; to install &lt;code&gt;pipenv&lt;/code&gt;. That way, you’ll have &lt;code&gt;pipenv&lt;/code&gt; in your path without any virtual environments.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Don’t use the system Python for your own projects&lt;/h3&gt; &lt;p&gt;The Python version installed in &lt;code&gt;/usr/bin/python&lt;/code&gt; and &lt;code&gt;/usr/bin/python2&lt;/code&gt; is part of the operating system. RHEL was tested with a specific Python release (2.7.5)  that will be maintained for the full ten-year supported life of the OS. Many of the built-in administration tools are actually written in Python. Trying to change the version of Python in &lt;code&gt;/usr/bin&lt;/code&gt; might actually break some of the OS functionality.&lt;/p&gt; &lt;p&gt;At some point, you might want to run your code on a different version of the OS. That OS will likely have a different version of Python installed as &lt;code&gt;/usr/bin/python&lt;/code&gt;,  &lt;code&gt;/usr/bin/python2&lt;/code&gt;, or even &lt;code&gt;/usr/bin/python3&lt;/code&gt;. The code you write may have dependencies on a specific version that can be best managed through virtual environments and/or software collections.&lt;/p&gt; &lt;p&gt;The one exception to the above is if you are writing system administration tools. In that case, you should use the Python in &lt;code&gt;/usr/bin&lt;/code&gt; because it has the correct modules and libraries installed for the APIs in the OS. Note: If you are writing system administration or management tools in Python, you might want to take a look at Ansible. Ansible is written in Python, uses Jinja2 for templating, and provides higher-level abstractions for many system tasks.&lt;/p&gt; &lt;p&gt;Tip: If you need to work with Python 2.7, install the &lt;code&gt;python27&lt;/code&gt; software collection. Follow the installation steps above but use &lt;code&gt;python27&lt;/code&gt; instead of &lt;code&gt;rh-python36&lt;/code&gt;. You can enable both collections at the same time, so you’ll have both the newer &lt;code&gt;python2.7&lt;/code&gt; and &lt;code&gt;python3.6&lt;/code&gt; in your path. Note: the collection you enable last is the one that will be first in your path, which determines the version you get when you type a command like &lt;code&gt;python&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt; without an explicit version number.&lt;/p&gt; &lt;h3&gt;Don&amp;#8217;t change or overwrite &lt;code&gt;/usr/bin/python&lt;/code&gt;, &lt;code&gt;/usr/bin/python2&lt;/code&gt;, or &lt;code&gt;/usr/bin/python2.7&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;As mentioned above, the system Python is part of Red Hat Enterprise Linux 7 and is used by critical system utilities such as &lt;code&gt;yum&lt;/code&gt;.  (Yes, yum is written in Python.) So overwriting the system Python is likely to break your system—badly. If you try to compile Python from source, do not do a &lt;code&gt;make install&lt;/code&gt; (as root) without using a different prefix or it will overwrite &lt;code&gt;/usr/bin/python&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;Software collection tips&lt;/h2&gt; &lt;h3&gt;Enable the Python collection *before* the virtual environment&lt;/h3&gt; &lt;p&gt;You should always enable the Python software collection &lt;strong&gt;before using any of Python virtual environment&lt;/strong&gt; utilities to create or activate an environment. In order for things to work correctly, you need to have your desired version of Python in your path because it will be needed by the Python virtual environment. A number of problems, some of which are subtle, come up if you try to enable/activate in the wrong order.&lt;code&gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Example for &lt;code&gt;venv&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ python3.6 -m venv myproject1 $ source myproject1/bin/activate &lt;/pre&gt; &lt;p&gt;When reactivating later in a new shell:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ source myproject1/bin/activate &lt;/pre&gt; &lt;p&gt;Example for &lt;code&gt;virtualenv&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ python3.6 -m virtualenv myproject1 $ source myproject1/bin/activate &lt;/pre&gt; &lt;p&gt;When reactivating later in a new shell:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ source myproject1/bin/activate &lt;/pre&gt; &lt;h3&gt;How to permanently enable a software collection&lt;/h3&gt; &lt;p&gt;To permanently add Python 3 to your path(s), you can add an &lt;code&gt;scl_source&lt;/code&gt; command to the &amp;#8220;dot files&amp;#8221; for your specific user ID. The benefit of this approach is that the collection is already enabled at every login. If you are using a graphical desktop, everything that you start from the menu will already have the collection enabled.&lt;/p&gt; &lt;p&gt;There are a few caveats with this approach:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;When you type &lt;code&gt;python&lt;/code&gt; with no version number, &lt;strong&gt;you will get Python 3 instead of Python 2&lt;/strong&gt;. You can still get Python 2 by typing &lt;code&gt;python2&lt;/code&gt; or &lt;code&gt;python2.7&lt;/code&gt;. Using an explicit version number is strongly recommended.&lt;/li&gt; &lt;li&gt;The above applies to other Python commands that are in &lt;code&gt;.../bin&lt;/code&gt; such as &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pydoc&lt;/code&gt;, &lt;code&gt;python-config&lt;/code&gt;,  &lt;code&gt;pyvenv&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt;. Use a version number to avoid surprises.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;There is no&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;scl disable&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;command&lt;/strong&gt;. Everything is in environment variables, so you can work around it, but it would be a manual process. You can, however, enable a different software collection that will then take precedence over the collection in your profile.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Using your preferred text editor, add the following line to your &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # Add RHSCL Python 3 to my login environment source scl_source enable rh-python36 &lt;/pre&gt; &lt;p&gt;Note: you could also add the &lt;code&gt;scl_source&lt;/code&gt; line to the start of a build script to select the desired Python for the build.  If your build script isn&amp;#8217;t written as a shell/bash script, you could just wrap it in a shell script that has the source &lt;code&gt;scl_source&lt;/code&gt;  command and then runs your build script.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;How to use Python 3 from RHSCL in the #! (shebang) line of a script&lt;/h3&gt; &lt;p&gt;You can create a script that will use Python from the software collection without a requirement for &lt;code&gt;scl enable&lt;/code&gt; to be manually run first. This can be done by using &lt;code&gt;/usr/bin/scl enable&lt;/code&gt; as the interpreter for the script:&lt;/p&gt; &lt;pre class="brush: python; title: ; notranslate"&gt; #!/usr/bin/scl enable rh-python36 -- python3 import sys version = &amp;#34;Python %d.%d&amp;#34; % (sys.version_info.major, sys.version_info.minor) print(&amp;#34;You are running Python&amp;#34;,version) &lt;/pre&gt; &lt;p&gt;Note: You may be tempted to try using just the full path to &lt;code&gt;.../root/usr/bin/python&lt;/code&gt; without the &lt;code&gt;scl enable&lt;/code&gt;. In many cases, this won’t work. The behavior is dependent on the specific software collection. For most collections, this will fail with a shared library error, since &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; isn’t set correctly. The &lt;code&gt;python27&lt;/code&gt; collection doesn’t give an error, but it finds the wrong shared library, so you get the wrong version of Python, which can be surprising.  However, &lt;code&gt;rh-python36&lt;/code&gt; can be referenced directly without setting &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;, but it is currently the only Python collection that works that way. There is no guarantee that future collections will work the same way.&lt;/p&gt; &lt;h3&gt;How to see which software collections are installed&lt;/h3&gt; &lt;p&gt;You can use the command &lt;code&gt;scl -l&lt;/code&gt; to see what software collections are installed.  This will show all software collections that are installed, whether they are enabled or not.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ scl -l python27 rh-python36 &lt;/pre&gt; &lt;h3&gt;How to tell which software collections are enabled&lt;/h3&gt; &lt;p&gt;The environment variable &lt;code&gt;X_SCLS&lt;/code&gt; contains a list of the software collections that are currently enabled.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ echo $X_SCLS $ for scl in $X_SCLS; do echo $scl; done rh-python36 python27 &lt;/pre&gt; &lt;p&gt;In scripts, you can use &lt;code&gt;scl_enabled &lt;em&gt;collection-name&lt;/em&gt;&lt;/code&gt; to test if a specific collection is enabled.&lt;/p&gt; &lt;h3&gt;How can I find a list of Red Hat Software Collections and how long they are supported?&lt;/h3&gt; &lt;p&gt;See &lt;a href="https://access.redhat.com/support/policy/updates/rhscl"&gt;Red Hat Software Collections Product Life Cycle&lt;/a&gt; on the Red Hat Customer Portal.  It has a list of Red Hat Software Collections packages and support information.&lt;/p&gt; &lt;p&gt;You can also check the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3/"&gt;release notes&lt;/a&gt; for the most recent release of Red Hat Software Collections.&lt;/p&gt; &lt;h3&gt;Find additional RPM packages and see other available versions&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;yum search&lt;/code&gt; to search for additional packages and see the other versions that are available:&lt;/p&gt; &lt;p&gt;To search for other packages that are part of the &lt;code&gt;rh-python36&lt;/code&gt; collection:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # yum search rh-python36 &lt;/pre&gt; &lt;p&gt;Starting with the Python 3.4 collection, the collection and package names are all prefixed with &lt;code&gt;rh-&lt;/code&gt;.  So you can use the following command to see all of the &lt;code&gt;rh-python&lt;/code&gt; packages and, therefore, see what collections are available.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # yum search rh-python &lt;/pre&gt; &lt;p&gt;Note: to see the available packages in the Python 2.7 collection, search for &lt;code&gt;python27&lt;/code&gt;.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # yum search python27 &lt;/pre&gt; &lt;p&gt;You can, of course, just search for &lt;code&gt;python&lt;/code&gt; and get a list of every available RPM that has &lt;code&gt;python&lt;/code&gt; in the name or description.  It will be a very long list, so it’s best to redirect the output to a file and use &lt;code&gt;grep&lt;/code&gt; or a text editor to search the file. The packages that start with &lt;code&gt;python-&lt;/code&gt; (without a version number) are part of the base RHEL Python 2.7.5 packages that are installed in &lt;code&gt;/usr/bin&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;Troubleshooting&lt;/h2&gt; &lt;h3&gt;Python: error while loading shared libraries&lt;/h3&gt; &lt;p&gt;This error occurs when you are trying to run a binary but the shared libraries it depends on can’t be found. Typically this occurs when trying to run &lt;code&gt;python&lt;/code&gt; from a software collection without enabling it first. In addition to setting &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;scl enable&lt;/code&gt; also sets &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;. This adds the directory containing the software collection’s shared objects to the library search path.&lt;/p&gt; &lt;p&gt;To see what environment variables are modified, take a look at &lt;code&gt;/opt/rh/rh-python/enable&lt;/code&gt;.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ cat /opt/rh/rh-python36/enable export PATH=/opt/rh/rh-python36/root/usr/bin${PATH:+:${PATH}} export LD_LIBRARY_PATH=/opt/rh/rh-python36/root/usr/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}} export MANPATH=/opt/rh/rh-python36/root/usr/share/man:$MANPATH export PKG_CONFIG_PATH=/opt/rh/rh-python36/root/usr/lib64/pkgconfig${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}} export XDG_DATA_DIRS=&amp;#34;/opt/rh/rh-python36/root/usr/share:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}&amp;#34; &lt;/pre&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h3&gt;Wrong version of Python when running &lt;code&gt;python&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;First, running &lt;code&gt;python&lt;/code&gt; with no version number is likely to give you an unexpected version of Python at some point. The result is dependent on your &lt;code&gt;PATH&lt;/code&gt;, which depends on whether you’ve enabled the software collection and/or activated the virtual environment. If you use a version number such as &lt;code&gt;python3.6&lt;/code&gt; and you haven’t enabled/activated the right environment, you’ll get a clean and easy-to-understand “command not found” error.&lt;/p&gt; &lt;p&gt;Second, you can also get the wrong version if you’ve &lt;strong&gt;forgotten to enable the software collection&lt;/strong&gt;. Enabling the software collection puts the collection’s &lt;code&gt;/bin&lt;/code&gt; directory in your path first, so it will hide all of the other versions of commands with the same name.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;The software collection needs to be enabled even if you give the full path to the &lt;code&gt;python&lt;/code&gt; binary&lt;/strong&gt;. For most of the collections, you’ll get a shared library error (see above) without the library path being set correctly. However, if you try this with the &lt;code&gt;python27&lt;/code&gt; collection, you’ll get Python 2.7.5 (the default version) instead of Python 2.7.13 as you’d expect.  This is because the shared library dependency is satisfied out of &lt;code&gt;/lib&lt;/code&gt; instead of from the software collection, so you pick up the system Python.&lt;/p&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h3&gt;Error running &lt;code&gt;pip&lt;/code&gt;: ImportError cannot import name &amp;#8216;main&amp;#8217;&lt;/h3&gt; &lt;p&gt;If you run &lt;code&gt;pip upgrade --user pip&lt;/code&gt;, as some guides suggest, the &lt;code&gt;pip&lt;/code&gt; command will no longer work. The problem is a path issue combined with an incompatibility between versions. The user installation of &lt;code&gt;pip&lt;/code&gt; placed a new &lt;code&gt;pip&lt;/code&gt; command in &lt;code&gt;~/.local/bin&lt;/code&gt;.  However, &lt;code&gt;~/.local/bin&lt;/code&gt; is in your path *after* the software collection. So you get the older wrapper script that is incompatible with the newer module.&lt;/p&gt; &lt;p&gt;This can be worked around in several ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Use virtual environments. Once you create or activate a virtual environment, you’ll get the correct &lt;code&gt;pip&lt;/code&gt; wrapper script in the &lt;code&gt;.../bin&lt;/code&gt; directory of the virtual environment.&lt;/li&gt; &lt;li&gt;Run &lt;code&gt;pip&lt;/code&gt; as a module: &lt;code&gt;python3.6 -m pip install …&lt;/code&gt;  (See &amp;#8220;Avoid Python wrapper scripts&amp;#8221; above.)&lt;/li&gt; &lt;li&gt;Don’t upgrade &lt;code&gt;pip&lt;/code&gt; outside of virtual environments.&lt;/li&gt; &lt;li&gt;Use the full path to the &lt;code&gt;pip&lt;/code&gt; wrapper script: &lt;code&gt;~/.local/bin/pip3.6&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Add &lt;code&gt;~/.local/bin&lt;/code&gt; as the first directory in your &lt;code&gt;PATH&lt;/code&gt; after enabling the Python software collection.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Note: To uninstall the upgraded &lt;code&gt;pip&lt;/code&gt; that was installed in &lt;code&gt;~/.local&lt;/code&gt;, run the following command under your regular user ID (not &lt;code&gt;root&lt;/code&gt;):&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ python3.6 -m pip uninstall pip &lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Can’t find &lt;code&gt;virtualenv3.6&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;rh-python36&lt;/code&gt; software collection includes the &lt;code&gt;virtualenv&lt;/code&gt; wrapper script but does not have a link for &lt;code&gt;virtualenv3.6&lt;/code&gt;. There are two workarounds for this, but first I should point out that &lt;code&gt;venv&lt;/code&gt; is now the Python 3 preferred tool for virtual environments.&lt;/p&gt; &lt;p&gt;The preferred workaround is to avoid the wrapper script entirely and invoke the module directly:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ python3.6 -m virtualenv myproject1 &lt;/pre&gt; &lt;p&gt;Alternatively, you could create your own symlink in your &lt;code&gt;~/bin&lt;/code&gt; directory:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ ln -s /opt/rh/rh-python36/root/usr/bin/virtualenv ~/bin/virtualenv3.6 &lt;/pre&gt; &lt;h2&gt;&lt;/h2&gt; &lt;hr /&gt; &lt;h2&gt;More information: Developing in Python on Red Hat Platforms&lt;/h2&gt; &lt;p&gt;Nick Coghlan and Graham Dumpleton gave a talk &lt;em&gt;&lt;a href="https://developers.redhat.com/videos/youtube/tLTSQiVQ8qk/"&gt;Developing in Python on Red Hat Platforms&lt;/a&gt;&lt;/em&gt; at DevNation 2016. The talk is chock full of information and still very relevant. They include information on building Python applications using containers, using s2i, and deploying to Red Hat OpenShift. I recommend watching the video or at least &lt;a href="https://www.slideshare.net/ncoghlan_dev/developing-in-python-on-red-hat-platforms-devnation-2016"&gt;reviewing the slides&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='390' src='https://www.youtube.com/embed/tLTSQiVQ8qk?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;&lt;/h2&gt; &lt;h2&gt;&lt;/h2&gt; &lt;hr /&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;After reading this article you’ve learned:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;How to install Python 3 and other versions of Python that are supported by Red Hat using Red Hat Software Collections on Red Hat Enterprise Linux&lt;/li&gt; &lt;li&gt;Python virtual environments are a best practice for installing Python modules while isolating dependencies in order to avoid conflicts. You can create and activate virtual environments with &lt;code&gt;venv&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt;. Both tools will be installed for you as part of the software collection.&lt;/li&gt; &lt;li&gt;About &lt;code&gt;pipenv&lt;/code&gt;, a tool that is similar to &lt;code&gt;npm&lt;/code&gt;, which is recommended by the Python Packaging Guide for managing application dependencies, especially on shared projects. Pipenv provides one command that integrates both &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Things to avoid such as: &lt;ul&gt; &lt;li&gt;Running &lt;code&gt;pip install&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt; to avoid conflicts with the RPM packages installed by &lt;code&gt;yum&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Typing &lt;code&gt;python&lt;/code&gt; without a version number to avoid ambiguity about which version will be run and surprises that might result from that&lt;/li&gt; &lt;li&gt;Modifying /usr/bin/python since many system management tools such as &lt;code&gt;yum&lt;/code&gt; depend on it and might break&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Tips for working with Red Hat Software Collections &lt;ul&gt; &lt;li&gt;Always enable the Python software collection &lt;strong&gt;before&lt;/strong&gt; using virtual environments&lt;/li&gt; &lt;li&gt;How to permanently enable a software collection, so you&amp;#8217;ll always have python3 in your path&lt;/li&gt; &lt;li&gt;How to use Python 3 from RHSCL in the #! (shebang) line of a script&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;How to troubleshoot common problems such as &lt;ul&gt; &lt;li&gt;Python: error while loading shared libraries&lt;/li&gt; &lt;li&gt;&lt;code&gt;pip upgrade&lt;/code&gt; breaks pip with: ImportError cannot import name &amp;#8216;main&amp;#8217;&lt;/li&gt; &lt;li&gt;Wrong version of Python when typing &lt;code&gt;python&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;title=How%20to%20install%20Python%203%20on%20RHEL" data-a2a-url="https://developers.redhat.com/blog/2018/08/13/install-python3-rhel/" data-a2a-title="How to install Python 3 on RHEL"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/13/install-python3-rhel/"&gt;How to install Python 3 on RHEL&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xp5SwaTg8-8" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This article shows how to install Python 3, pip, venv, virtualenv, and pipenv on Red Hat Enterprise Linux 7. After following the steps in this article, you should be in a good position to follow many Python guides and tutorials using RHEL. Using Python virtual environments is a best practice to isolate project-specific dependencies and create [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/13/install-python3-rhel/"&gt;How to install Python 3 on RHEL&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/08/13/install-python3-rhel/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">512967</post-id><dc:creator>Rob Terzi</dc:creator><dc:date>2018-08-13T11:00:46Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/13/install-python3-rhel/</feedburner:origLink></entry><entry><title>Node.js client 0.5.0 released with improved stability and better OSX integration</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0pN_IvYVds0/nodejs-client-050-with-improved.html" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="javascript" scheme="searchisko:content:tags" /><category term="js-client" scheme="searchisko:content:tags" /><category term="Mac" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Galder Zamarreño</name></author><id>searchisko:content:id:jbossorg_blog-node_js_client_0_5_0_released_with_improved_stability_and_better_osx_integration</id><updated>2018-08-13T07:47:29Z</updated><published>2018-08-13T07:44:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Infinispan Node.js client &lt;a href="https://www.npmjs.com/package/infinispan"&gt;0.5.0&lt;/a&gt; was released last week. It comes with much improved stability under heavy load conditions and hence it's a recommended upgrade for any current users.&lt;br /&gt;&lt;br /&gt;On top of that, a configuration option called&amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;topologyUpdates&lt;/span&gt; (&lt;b&gt;true (default)&amp;nbsp;&lt;/b&gt;/ false) has been added to disable topology updates. This can be useful when trying to access Infinispan server running within a Docker container on MacOs. Without this option to disable topology updates, Node.js client receives internal Docker IP addresses on first contact which cannot be accessed from outside Docker on MacOs. See &lt;a href="https://blog.infinispan.org/2018/03/accessing-infinispan-inside-docker-for.html"&gt;this previous blog post&lt;/a&gt; for more details.&lt;br /&gt;&lt;br /&gt;If you're a Node.js user and want to store data remotely in Infinispan server instances, please give the client a go and tell us what you think of it via our &lt;a href="https://developer.jboss.org/en/infinispan/content"&gt;forum&lt;/a&gt;, via our &lt;a href="https://issues.jboss.org/projects/HRJS"&gt;issue tracker&lt;/a&gt; or via &lt;a href="https://zulipchat.com/"&gt;Zulip&lt;/a&gt; on &lt;a href="https://infinispan.zulipchat.com/"&gt;Infinispan channel&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Cheers,&lt;br /&gt;Galder&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/I7v1xZwHeQo" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0pN_IvYVds0" height="1" width="1" alt=""/&gt;</content><summary>Infinispan Node.js client 0.5.0 was released last week. It comes with much improved stability under heavy load conditions and hence it's a recommended upgrade for any current users. On top of that, a configuration option called topologyUpdates (true (default) / false) has been added to disable topology updates. This can be useful when trying to access Infinispan server running within a Docker cont...</summary><dc:creator>Galder Zamarreño</dc:creator><dc:date>2018-08-13T07:44:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/I7v1xZwHeQo/nodejs-client-050-with-improved.html</feedburner:origLink></entry><entry><title>Develop Batch Applications with Red Hat Developer Studio</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nVUTC-AJksA/develop-batch-applications-with-red-hat-developer-studio" /><category term="feed_group_name_jberet" scheme="searchisko:content:tags" /><category term="feed_name_jberet" scheme="searchisko:content:tags" /><author><name>Cheng Fang</name></author><id>searchisko:content:id:jbossorg_blog-develop_batch_applications_with_red_hat_developer_studio</id><updated>2018-08-13T03:43:01Z</updated><published>2018-08-13T03:43:01Z</published><content type="html">&lt;!-- [DocumentBodyStart:200ef193-67fa-42d1-b6c6-f2dfd784d080] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/products/devstudio/overview/" rel="nofollow"&gt;Red Hat Developer Studio&lt;/a&gt; is a comprehensive IDE for developing a wide range of enterprise applications, including Java applications for batch processing.&amp;#160; In this post, I will write about how to develop a &lt;a class="jive-link-external-small" href="https://jcp.org/en/jsr/detail?id=352" rel="nofollow"&gt;standard-based&lt;/a&gt; batch application in Red Hat Developer Studio, using various &lt;a class="jive-link-external-small" href="https://github.com/jberet" rel="nofollow"&gt;JBeret&lt;/a&gt; libraries, and deployed to &lt;a class="jive-link-external-small" href="http://wildfly.org/" rel="nofollow"&gt;WildFly&lt;/a&gt; application server.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Import Sample Application&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;We will be using an existing batch sample application, &lt;a class="jive-link-external-small" href="https://github.com/jberet/numbers-chunk.git" rel="nofollow"&gt;numbers-chunk&lt;/a&gt;&lt;span&gt;, as the base project to save us the initial setup work.&amp;#160; First, we need to import it into the&amp;#160; studio with the Eclipse project import wizard (&lt;strong&gt;File &lt;/strong&gt;&amp;gt;&lt;strong&gt; Import&lt;/strong&gt;, and then choose &lt;strong&gt;Maven &lt;/strong&gt;&amp;gt;&lt;strong&gt; Check out Maven Projects from SCM&lt;/strong&gt;, and then enter its git repo URL: &lt;/span&gt;&lt;a class="jive-link-external-small" href="https://github.com/jberet/numbers-chunk.git" rel="nofollow"&gt;https://github.com/jberet/numbers-chunk.git&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234384/import-project.png"&gt;&lt;img alt="" class="image-1 jive-image" height="614" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234384/import-project.png" style="width: 620px; height: 353px;" width="1078"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Now we have a fully functional Java EE batch application imported into the studio, which can be deployed and run in WildFly, or enhanced to add more jobs and processing steps. There is an existing job XML file, numbers.xml, which contains a chunk-type step reading an array of numbers and writing them out to the console.&amp;#160; We will define a new job similar to this and also adding an item processor to the step.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Implement Item Processor Class&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Create a new folder named "java" under src/main, if it does not already exist (&lt;strong&gt;File&lt;/strong&gt; &amp;gt; &lt;strong&gt;New&lt;/strong&gt; &amp;gt; &lt;strong&gt;Folder&lt;/strong&gt;).&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Create the java package structure, org.jberet.samples.wildfly.numberschunk, under src/main/java directory.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Create the item processor class by following the command sequence &lt;strong&gt;File&lt;/strong&gt; &amp;gt; &lt;strong&gt;New&lt;/strong&gt; &amp;gt; &lt;strong&gt;Other&lt;/strong&gt; (or &lt;strong&gt;Command + N&lt;/strong&gt;, or &lt;strong&gt;Ctrl + N&lt;/strong&gt;) to bring up the wizard:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234386/new-batch-artifact.png"&gt;&lt;img alt="" class="image-2 jive-image" height="899" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234386/964-899/new-batch-artifact.png" style="width: 620px; height: 578px;" width="964"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234387/new-processor.png"&gt;&lt;img alt="" class="image-3 jive-image" height="900" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234387/888-900/new-processor.png" style="width: 620px; height: 628px;" width="888"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;In the above wizard, specify the item processor class name: NumberProcessor, and add a property named multiple.&amp;#160; After clicking &lt;strong&gt;Finish&lt;/strong&gt;, a skeleton class is generated.&amp;#160; And we just need to change the body of its processItem method to multiply the item number by the multiple property:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:5b244019-9fbc-4124-ae0c-5f674585f69e][excluded]--&gt;&lt;pre class="java" name="code"&gt;package org.jberet.samples.wildfly.numberschunk; import javax.batch.api.BatchProperty; import javax.batch.api.chunk.ItemProcessor; import javax.inject.Inject; import javax.inject.Named; @Named public class NumberProcessor implements ItemProcessor { &amp;#160;&amp;#160;&amp;#160; @Inject &amp;#160;&amp;#160;&amp;#160; @BatchProperty &amp;#160;&amp;#160;&amp;#160; protected int multiple; &amp;#160;&amp;#160;&amp;#160; @Override &amp;#160;&amp;#160;&amp;#160; public Object processItem(Object item) throws Exception { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return ((Integer) item) * multiple; &amp;#160;&amp;#160;&amp;#160; } }&lt;/pre&gt;&lt;!--[CodeBlockEnd:5b244019-9fbc-4124-ae0c-5f674585f69e]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Using the above batch artifact wizard, you can create all types of batch artifacts:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Batchlet&lt;/li&gt;&lt;li&gt;Decider&lt;/li&gt;&lt;li&gt;Item Reader&lt;/li&gt;&lt;li&gt;Item Writer&lt;/li&gt;&lt;li&gt;Item Processor&lt;/li&gt;&lt;li&gt;Checkpoint Algorithm&lt;/li&gt;&lt;li&gt;Partition Mapper&lt;/li&gt;&lt;li&gt;Partition Reducer&lt;/li&gt;&lt;li&gt;Partition Collector&lt;/li&gt;&lt;li&gt;Partition Analyzer&lt;/li&gt;&lt;li&gt;Job Listener&lt;/li&gt;&lt;li&gt;Step Listener&lt;/li&gt;&lt;li&gt;Chunk Listener&lt;/li&gt;&lt;li&gt;Item Reader Listener&lt;/li&gt;&lt;li&gt;Item Process Listener&lt;/li&gt;&lt;li&gt;Item Write Listener&lt;/li&gt;&lt;li&gt;Skip Read Listener&lt;/li&gt;&lt;li&gt;Skip Process Listener&lt;/li&gt;&lt;li&gt;Skip Write Listener&lt;/li&gt;&lt;li&gt;Retry Read Listener&lt;/li&gt;&lt;li&gt;Retry Process Listener&lt;/li&gt;&lt;li&gt;Retry Write Listener&lt;/li&gt;&lt;/ol&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Design Batch Job XML&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Next, let's see how the studio makes it easy to design batch job flows.&amp;#160; Choose menu &lt;strong&gt;File&lt;/strong&gt; &amp;gt; &lt;strong&gt;New&lt;/strong&gt; &amp;gt; &lt;strong&gt;Other&lt;/strong&gt; (&lt;strong&gt;Command + N&lt;/strong&gt; or &lt;strong&gt;Ctrl + N&lt;/strong&gt;) to start the batch job XML wizard:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234812/new-batch.png"&gt;&lt;img alt="" class="image-4 jive-image" height="899" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234812/966-899/new-batch.png" style="width: 620px; height: 577px;" width="966"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;In the next screen, enter the file name for the job XML: job1.xml.&amp;#160; Notice that the job id field is automatically updated to the same value without the .xml extension.&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234813/new-job-xml.png"&gt;&lt;img alt="" class="image-5 jive-image" height="900" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234813/1013-900/new-job-xml.png" style="width: 620px; height: 550px;" width="1013"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Define and Configure Step&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;After clicking &lt;strong&gt;Finish&lt;/strong&gt;, the job XML skeleton is generated at the correct location, numbers-chunk/src/main/resources/META-INF/batch-jobs.&amp;#160; In the studio editor, the job XML is displayed in 3 views: Design, Diagram and Source.&amp;#160; You can modify the job definition in any of the 3 views and all changes will be synchronized.&amp;#160; Next, let's add a step, step1, to the job in the Design view:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234814/design-new-step.png"&gt;&lt;img alt="" class="image-6 jive-image" height="899" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234814/1244-899/design-new-step.png" style="width: 620px; height: 448px;" width="1244"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In the step details panel, add step configuration information, including id and next attribute, transition elements (fail, end, stop and next) and step properties.&amp;#160; Note that only one of next attribute or next transition element can be specified for transition, but not both.&amp;#160; You can enter the name and value for any number of step properties in this page.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234815/step-transitions.png"&gt;&lt;img alt="" class="image-7 jive-image" height="900" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234815/1010-900/step-transitions.png" style="width: 620px; height: 552px;" width="1010"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Configure Chunk&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Since we want step1 to be a chunk step, we need to add a chunk element to step1.&amp;#160; Right-click step1 on the left panel, and choose &lt;strong&gt;Add&lt;/strong&gt; &amp;gt; &lt;strong&gt;Chunk&lt;/strong&gt; in the context menu, and fill chunk attributes on the right panel.&amp;#160; These are all optional configurations and their default values should suffice in many cases.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234816/step-chunk-config.png"&gt;&lt;img alt="" class="image-8 jive-image" height="900" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234816/1157-900/step-chunk-config.png" style="width: 620px; height: 482px;" width="1157"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We will use the NumberProcess class we created earlier as the item processor.&amp;#160; The Processor Ref field supports code-completion: press &lt;strong&gt;Ctrl-Space&lt;/strong&gt; while the focus is in this field to display all item processors available in the application.&amp;#160; Alternatively, you can click the &lt;strong&gt;browse&lt;/strong&gt; button to the right of the input field to select artifact from all available choices.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234817/chunk-processor.png"&gt;&lt;img alt="" class="image-9 jive-image" height="768" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234817/chunk-processor.png" style="width: 620px; height: 443px;" width="1076"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Configure Item Reader and Writer&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;A chunk-type step is required to contain an item reader and writer.&amp;#160; Expand the &lt;strong&gt;Chunk&lt;/strong&gt; node in the left panel, you will see reader, writer and processor subelements.&amp;#160; Click &lt;strong&gt;Reader&lt;/strong&gt; element and you will be able to configure the reader in the right panel.&amp;#160; Choose arrayItemReader as the reader ref among all available readers, which come from jberet-support library configured as project dependency.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Specify 2 properties for arrayItemReader:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;resource: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]&lt;/li&gt;&lt;li&gt;beanType: java.lang.Integer&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234926/reader-choose.png"&gt;&lt;img alt="" class="image-10 jive-image" height="899" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234926/1313-899/reader-choose.png" style="width: 620px; height: 425px;" width="1313"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Item writer can be configured similarly by choosing mockItemWriter from all available writers.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234927/writer-choose.png"&gt;&lt;img alt="" class="image-11 jive-image" height="860" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234927/writer-choose.png" style="width: 620px; height: 379px;" width="1406"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Build, Publish and Run Batch Application&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;After saving the project, we are ready to build the application.&amp;#160; If &lt;strong&gt;Project&lt;/strong&gt; &amp;gt; &lt;strong&gt;Build Automatically&lt;/strong&gt; is checked, then the project has already been built; otherwise, choose &lt;strong&gt;Project&lt;/strong&gt; &amp;gt; &lt;strong&gt;Build&lt;/strong&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To start WildFly from within the studio, go to Servers view, right-click &lt;strong&gt;WildFly&lt;/strong&gt; element and choose &lt;strong&gt;Start&lt;/strong&gt; from the context menu.&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234928/wildfly.png"&gt;&lt;img alt="" class="image-12 jive-image" height="498" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234928/wildfly.png" style="width: 620px; height: 215px;" width="1436"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;To publish numbers-chunk application to WildFly, select numbers-chunk project in Project Explorer, then choose&amp;#160; menu &lt;strong&gt;Run&lt;/strong&gt; &amp;gt; &lt;strong&gt;Run As&lt;/strong&gt; &amp;gt; &lt;strong&gt;Run on Server&lt;/strong&gt;.&amp;#160; After the application is successfully published onto WildFly, the studio will display the application welcome page:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234929/welcome-page.png"&gt;&lt;img alt="" class="image-13 jive-image" height="312" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234929/welcome-page.png" style="width: 620px; height: 134px;" width="1448"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Perform Batch Processing Operations&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Now that our batch application is up and running, we are ready to perform some common batch processing tasks via REST calls.&amp;#160; You can issue curl commands in a terminal, or use other REST client tools.&amp;#160; To keep it simple, we will use curl commands to send REST requests and python to pretty-print JSON output.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To start job numbers.xml (the existing job from github remote repo):&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:81a08d69-41a6-45a4-90b2-05528b90659a][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;curl -s -X POST -H 'Content-Type:application/json' http://localhost:8080/numbers-chunk/api/jobs/numbers/start | python -m json.tool { &amp;#160;&amp;#160;&amp;#160; "batchStatus": "STARTING", &amp;#160;&amp;#160;&amp;#160; "createTime": 1534112744022, &amp;#160;&amp;#160;&amp;#160; "endTime": null, &amp;#160;&amp;#160;&amp;#160; "executionId": 1, &amp;#160;&amp;#160;&amp;#160; "exitStatus": null, &amp;#160;&amp;#160;&amp;#160; "href": "http://localhost:8080/numbers-chunk/api/jobexecutions/1", &amp;#160;&amp;#160;&amp;#160; "jobInstanceId": 1, &amp;#160;&amp;#160;&amp;#160; "jobName": "numbers", &amp;#160;&amp;#160;&amp;#160; "jobParameters": null, &amp;#160;&amp;#160;&amp;#160; "lastUpdatedTime": 1534112744022, &amp;#160;&amp;#160;&amp;#160; "startTime": null }&lt;/pre&gt;&lt;!--[CodeBlockEnd:81a08d69-41a6-45a4-90b2-05528b90659a]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To start job job1.xml (the new job we just created).&amp;#160; In the studio console window, notice that all numbers have been multiplied by 100 by the item processor.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:663d50e7-05ba-4807-a7e1-294cf9723ae5][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;curl -s -X POST -H 'Content-Type:application/json' http://localhost:8080/numbers-chunk/api/jobs/job1/start | python -m json.tool { &amp;#160;&amp;#160;&amp;#160; "batchStatus": "STARTING", &amp;#160;&amp;#160;&amp;#160; "createTime": 1534114529790, &amp;#160;&amp;#160;&amp;#160; "endTime": null, &amp;#160;&amp;#160;&amp;#160; "executionId": 2, &amp;#160;&amp;#160;&amp;#160; "exitStatus": null, &amp;#160;&amp;#160;&amp;#160; "href": "http://localhost:8080/numbers-chunk/api/jobexecutions/2", &amp;#160;&amp;#160;&amp;#160; "jobInstanceId": 2, &amp;#160;&amp;#160;&amp;#160; "jobName": "job1", &amp;#160;&amp;#160;&amp;#160; "jobParameters": null, &amp;#160;&amp;#160;&amp;#160; "lastUpdatedTime": 1534114529790, &amp;#160;&amp;#160;&amp;#160; "startTime": null }&lt;/pre&gt;&lt;!--[CodeBlockEnd:663d50e7-05ba-4807-a7e1-294cf9723ae5]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To check the status of job execution we just started above:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:d092b01c-defa-42fd-b410-556417a709ba][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;curl -s http://localhost:8080/numbers-chunk/api/jobexecutions/2 | python -m json.tool { &amp;#160;&amp;#160;&amp;#160; "batchStatus": "COMPLETED", &amp;#160;&amp;#160;&amp;#160; "createTime": 1534114529790, &amp;#160;&amp;#160;&amp;#160; "endTime": 1534114529837, &amp;#160;&amp;#160;&amp;#160; "executionId": 2, &amp;#160;&amp;#160;&amp;#160; "exitStatus": "COMPLETED", &amp;#160;&amp;#160;&amp;#160; "href": "http://localhost:8080/numbers-chunk/api/jobexecutions/2", &amp;#160;&amp;#160;&amp;#160; "jobInstanceId": 2, &amp;#160;&amp;#160;&amp;#160; "jobName": "job1", &amp;#160;&amp;#160;&amp;#160; "jobParameters": null, &amp;#160;&amp;#160;&amp;#160; "lastUpdatedTime": 1534114529837, &amp;#160;&amp;#160;&amp;#160; "startTime": 1534114529807 }&lt;/pre&gt;&lt;!--[CodeBlockEnd:d092b01c-defa-42fd-b410-556417a709ba]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To show step execution details of a job execution:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:aaee9144-7c1b-41d0-85b2-015b6ebefdbe][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;curl -s http://localhost:8080/numbers-chunk/api/jobexecutions/1/stepexecutions | python -m json.tool [ &amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "batchStatus": "COMPLETED", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "endTime": 1534112744112, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "exitStatus": "COMPLETED", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "metrics": [ &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "FILTER_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 0 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "ROLLBACK_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 0 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "PROCESS_SKIP_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 0 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "READ_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 16 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "WRITE_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 16 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "WRITE_SKIP_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 0 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "READ_SKIP_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 0 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "COMMIT_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 2 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; } &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; ], &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "startTime": 1534112744046, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "stepExecutionId": 1, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "stepName": "simple.step1" &amp;#160;&amp;#160;&amp;#160; } ]&lt;/pre&gt;&lt;!--[CodeBlockEnd:aaee9144-7c1b-41d0-85b2-015b6ebefdbe]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To schedule a job for later or repeated execution:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:5695e7af-b0ba-4cb7-9c23-08a0a49ddc97][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;curl -s -X POST -H 'Content-Type:application/json' -d '{"jobName":"job1", "initialDelay":1, "interval":60}' http://localhost:8080/numbers-chunk/api/jobs/job1/schedule | python -m json.tool { &amp;#160;&amp;#160;&amp;#160; "createTime": 1534130379291, &amp;#160;&amp;#160;&amp;#160; "id": "2", &amp;#160;&amp;#160;&amp;#160; "jobExecutionIds": [], &amp;#160;&amp;#160;&amp;#160; "jobScheduleConfig": { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "afterDelay": 0, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "initialDelay": 1, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "interval": 60, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "jobExecutionId": 0, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "jobName": "job1", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "jobParameters": null, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "persistent": false, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "scheduleExpression": null &amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160; "status": "SCHEDULED" }&lt;/pre&gt;&lt;!--[CodeBlockEnd:5695e7af-b0ba-4cb7-9c23-08a0a49ddc97]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/p&gt;&lt;p&gt;To cancel the above schedule:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:cbe7ed48-1505-4e74-a240-33e78641f164][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;curl -s -X POST -H 'Content-Type:application/json' http://localhost:8080/numbers-chunk/api/schedules/1/cancel | python -m json.tool&lt;/pre&gt;&lt;!--[CodeBlockEnd:cbe7ed48-1505-4e74-a240-33e78641f164]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;In this post, we've explored various features in Red Hat Developer Studio in developing batch application, including using wizards for generating batch artifacts, visually designing batch job work flow, instant synchronization between job XML design view, diagram and source view, batch artifact ref name suggestions and completion, etc.&amp;#160; I hope these features will help you further improve productivity in developing batch applications.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:200ef193-67fa-42d1-b6c6-f2dfd784d080] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nVUTC-AJksA" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Developer Studio is a comprehensive IDE for developing a wide range of enterprise applications, including Java applications for batch processing.  In this post, I will write about how to develop a standard-based batch application in Red Hat Developer Studio, using various JBeret libraries, and deployed to WildFly application server.   Import Sample Application   We will be using an existin...</summary><dc:creator>Cheng Fang</dc:creator><dc:date>2018-08-13T03:43:01Z</dc:date><feedburner:origLink>https://developer.jboss.org/community/jberet/blog/2018/08/12/develop-batch-applications-with-red-hat-developer-studio</feedburner:origLink></entry><entry><title>Hibernate Validator 6.0.12.Final released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Tqr0UhUhtiw/" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate Validator" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>Guillaume Smet</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_validator_6_0_12_final_released</id><updated>2018-08-13T13:38:40Z</updated><published>2018-08-13T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We released Hibernate Validator 6.0.12.Final which comes with a change to our CDI integration and fixes and improvements to our JDK 11 support.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This is a recommended upgrade for everyone using Hibernate Validator and it is a drop-in replacement for 6.0.11.Final in most cases (see &lt;a href="https://developer.jboss.org/wiki/HibernateValidatorMigrationGuide"&gt;our migration guide&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="sect2"&gt; &lt;h3 id="cdi-integration"&gt;&lt;a class="anchor" href="#cdi-integration"&gt;&lt;/a&gt;CDI integration&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;While working on Hibernate Validator 6.0.10.Final, we noticed that with the CDI integration, methods of a class wouldn’t be validated if the class doesn’t have Bean Validation annotations itself e.g. if the annotations are on a superclass or an interface but not on the class proper.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Bean Validation recommends to put the &lt;code&gt;@ValidateOnExecution&lt;/code&gt; on every class you want validated for portability reasons but we thought it would be better to get rid of this unexpected limitation for the reference implementation.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As CDI does not allow to filter classes on annotations of parent classes and interfaces, this led us to fix the issue by scanning for annotations in the whole class hierarchy of the class passed to us by CDI. It was not ideal and we knew it would be a bit slower but we thought it would be acceptable.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Andrew Guibert from the Open Liberty team contacted us last week to let us know that this had a bad impact on the startup time of CDI applications, potentially leading to a 20% slowdown.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We decided to revert this patch for now as part of &lt;a href="https://hibernate.atlassian.net/browse/HV-1645"&gt;HV-1645&lt;/a&gt; and we will open a CDI issue instead, hoping this limitation could be solved the CDI way and with very low performance impact in the future.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="jdk-11-support"&gt;&lt;a class="anchor" href="#jdk-11-support"&gt;&lt;/a&gt;JDK 11 support&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Stéphane Nicoll from Pivotal informed us that when used with JDK 11, Hibernate Validator would pull JavaFX as a dependency. This is an unexpected consequence of our testing infrastructure with JDK 11 and JavaFX and is now fixed.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We also did some additional infrastructure work to be able to run our WildFly integration tests and run the TCK test suite in a WildFly container with JDK 11.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="full-changelog"&gt;&lt;a class="anchor" href="#full-changelog"&gt;&lt;/a&gt;Full changelog&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The complete list of fixed issues can be found &lt;a href="https://hibernate.atlassian.net/issues/?jql=project%20%3D%20HV%20AND%20fixVersion%20%3D%206.0.12.Final%20order%20by%20created%20DESC"&gt;on our JIRA&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="getting-6-0-12-final"&gt;&lt;a class="anchor" href="#getting-6-0-12-final"&gt;&lt;/a&gt;Getting 6.0.12.Final&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get the release with Maven, Gradle etc. use the following GAV coordinates:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;org.hibernate.validator:hibernate-validator:6.0.12.Final&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;org.hibernate.validator:hibernate-validator-cdi:6.0.12.Final&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;org.hibernate.validator:hibernate-validator-annotation-processor:6.0.12.Final&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Note that the group id has changed from &lt;code&gt;org.hibernate&lt;/code&gt; (Hibernate Validator 5 and earlier) to &lt;code&gt;org.hibernate.validator&lt;/code&gt; (from Hibernate Validator 6 onwards).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Alternatively, a distribution bundle containing all the bits is provided on SourceForge (&lt;a href="http://sourceforge.net/projects/hibernate/files/hibernate-validator/6.0.12.Final/hibernate-validator-6.0.12.Final-dist.tar.gz/download"&gt;TAR.GZ&lt;/a&gt;, &lt;a href="http://sourceforge.net/projects/hibernate/files/hibernate-validator/6.0.12.Final/hibernate-validator-6.0.12.Final-dist.zip/download"&gt;ZIP&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you want to benefit from the new features of this version on WildFly, we also provide WildFly patches for &lt;a href="http://search.maven.org/remotecontent?filepath=org/hibernate/validator/hibernate-validator-modules/6.0.12.Final/hibernate-validator-modules-6.0.12.Final-wildfly-13.0.0.Final-patch.zip"&gt;WildFly 13&lt;/a&gt; and &lt;a href="http://search.maven.org/remotecontent?filepath=org/hibernate/validator/hibernate-validator-modules/6.0.12.Final/hibernate-validator-modules-6.0.12.Final-wildfly-14.0.0.Beta1-patch.zip"&gt;WildFly 14 Beta1&lt;/a&gt;. You can read about how to apply such patches &lt;a href="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#_updating_hibernate_validator_in_wildfly"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-next"&gt;&lt;a class="anchor" href="#what-s-next"&gt;&lt;/a&gt;What’s next?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Our efforts are now directed towards the new 6.1, which will introduce some structuring changes such as allowing getters with non standard names (&lt;code&gt;name()&lt;/code&gt; instead of &lt;code&gt;getName()&lt;/code&gt; for instance) and JSON validation support.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get in touch, use the usual channels:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/tagged/hibernate-validator"&gt;hibernate-validator tag on Stack Overflow&lt;/a&gt; (usage questions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-validator"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HV"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/beanvalidation-dev/"&gt;Bean Validation development mailing list&lt;/a&gt; (discussions about the Bean Validation specification)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Tqr0UhUhtiw" height="1" width="1" alt=""/&gt;</content><summary>We released Hibernate Validator 6.0.12.Final which comes with a change to our CDI integration and fixes and improvements to our JDK 11 support. This is a recommended upgrade for everyone using Hibernate Validator and it is a drop-in replacement for 6.0.11.Final in most cases (see our migration guide). What’s new CDI integration While working on Hibernate Validator 6.0.10.Final, we noticed that wit...</summary><dc:creator>Guillaume Smet</dc:creator><dc:date>2018-08-13T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/08/13/hibernate-validator-6012-final-out/</feedburner:origLink></entry><entry><title>Application Safety and Correctness Cannot Be Offloaded to Istio or Any Service Mesh</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/H1EdyqP3sQE/" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_cepostablog" scheme="searchisko:content:tags" /><author><name>christian posta</name></author><id>searchisko:content:id:jbossorg_blog-application_safety_and_correctness_cannot_be_offloaded_to_istio_or_any_service_mesh</id><updated>2018-08-10T13:18:34Z</updated><published>2018-08-10T13:18:34Z</published><content type="html">&lt;p&gt;I’ve recently &lt;a href="https://www.slideshare.net/ceposta/evolution-of-integration-and-microservices-patterns-with-service-mesh-107786281"&gt;started giving a talk&lt;/a&gt; about the evolution of integration and the adoption of service mesh, specifically Istio. I’ve been excited about &lt;a href="http://istio.io"&gt;Istio&lt;/a&gt; ever since I first heard about it back in January 2017; in fact I’ve been &lt;a href="http://blog.christianposta.com/microservices/microservices-2-0/"&gt;excited about this new wave of technology helping to &lt;/a&gt; make microservices and cloud-native architectures a possibility for organizations. Maybe you can tell, as I’ve been writing a lot about it (&lt;a href="twitter.com/christianposta"&gt;follow along for the latest @christianposta&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="http://blog.christianposta.com/microservices/the-hardest-part-of-microservices-calling-your-services/"&gt;The Hardest Part of Microservices: Calling Your Services&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.christianposta.com/microservices/00-microservices-patterns-with-envoy-proxy-series/"&gt;Microservices Patterns With Envoy Sidecar Proxy: The series&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.christianposta.com/microservices/application-network-functions-with-esbs-api-management-and-now-service-mesh/"&gt;http://blog.christianposta.com/microservices/application-network-functions-with-esbs-api-management-and-now-service-mesh/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.christianposta.com/microservices/comparing-envoy-and-istio-circuit-breaking-with-netflix-hystrix/"&gt;Comparing Envoy and Istio Circuit Breaking With Netflix OSS Hystrix&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.christianposta.com/microservices/traffic-shadowing-with-istio-reduce-the-risk-of-code-release/"&gt;Traffic Shadowing With Istio: Reducing the Risk of Code Release&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.christianposta.com/microservices/advanced-traffic-shadowing-patterns-for-microservices-with-istio-service-mesh/"&gt;Advanced Traffic-shadowing Patterns for Microservices With Istio Service Mesh&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.christianposta.com/how-a-service-mesh-can-help-with-microservices-security/"&gt;How a Service Mesh Can Help With Microservices Security&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Istio builds on some of the goals of containers and Kubernetes: provide valuable distributed-systems patterns as language-agnostic idioms. For example, Kubernetes manages containers across a fleet of machines by doing things like start/stop, health check, scaling/autoscaling, etc regardless of what’s actually running in the containers. Similarly, Istio can solve challenges of reliability, security, policy, and traffic by transparently applying that outside of the application’s container.&lt;/p&gt; &lt;p&gt;With the &lt;a href="https://istio.io/blog/2018/announcing-1.0/"&gt;announcement of Istio 1.0 on July 31st 2018&lt;/a&gt;, we’re seeing a large uptick in Istio usage and adoption. One question I have been seeing is “if Istio provides reliability for me, do I have to worry about it in my application?”&lt;/p&gt; &lt;p&gt;The answer is: abso-freakin-lutely :)&lt;/p&gt; &lt;p&gt;I wrote a post &lt;a href="http://blog.christianposta.com/microservices/application-network-functions-with-esbs-api-management-and-now-service-mesh/"&gt;almost exactly a year ago&lt;/a&gt; that included this distinction, but didn’t make it forcefully enough; this post is my attempt to help rectify that and builds on the &lt;a href="https://www.slideshare.net/ceposta/evolution-of-integration-and-microservices-patterns-with-service-mesh-107786281"&gt;talk earlier referenced&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;So just to set some context: Istio provides application-networking “reliability” capabilities like&lt;/p&gt; &lt;ul&gt; &lt;li&gt;automatic retry&lt;/li&gt; &lt;li&gt;retry quota/budget&lt;/li&gt; &lt;li&gt;connection timeout&lt;/li&gt; &lt;li&gt;request timeout&lt;/li&gt; &lt;li&gt;client-side load balancing&lt;/li&gt; &lt;li&gt;circuit breaking&lt;/li&gt; &lt;li&gt;bulkheading&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;These capabilities are essential when dealing with distributed systems. Networks are not reliable and break a lot of the nice safe assumptions/abstractions we have in a monolith. We’re forced to either solve these problems, or suffer unpredictable system-wide outages.&lt;/p&gt; &lt;h2 id="taking-a-step-back"&gt;Taking a step back&lt;/h2&gt; &lt;p&gt;The larger problem here is actually just getting applications to talk to each other to solve some &lt;em&gt;business functionality&lt;/em&gt;. That’s why we write software, ultimately – to deliver some kind of business value. And that software uses constructs from the business’s domain like “Customer”, “Shopping Cart”, “Account” etc. We &lt;a href="http://blog.christianposta.com/microservices/the-hardest-part-about-microservices-data/"&gt;see from Domain Driven Design that each service may have slightly different understandings&lt;/a&gt; of each of those concepts.&lt;/p&gt; &lt;p&gt;These poorly specified concepts, and the larger business constraints (ie, Customer is uniquely identified by name and email, or Customer can have only one type of Checking account, etc), along with unreliable networking and overall unpredictable infrastructure (build your services with the assumption that things can, and will, fail!) make building things &lt;em&gt;correctly&lt;/em&gt; very difficult.&lt;/p&gt; &lt;h2 id="end-to-end-correctness-and-safety"&gt;End to end correctness and safety&lt;/h2&gt; &lt;p&gt;The fact remains, however, that in terms of building correct and safe applications, the &lt;em&gt;responsibility&lt;/em&gt; of doing so becomes that of the application (and all those who support it). We can try to build lower-levels of reliability into components of the system for performance or optimizations, but the overall responsibility still remains with the applications. This principle was covered in &lt;a href="http://web.mit.edu/Saltzer/www/publications/endtoend/endtoend.pdf"&gt;“End-to-End Arguments in System Design”&lt;/a&gt; by Saltzer, Reed and Clark in 1984. Specifically:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;The function in question can completely and correctly be implemented only with the knowledge and help of the application standing at the endpoints of the communication system.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Here, “function” is meant to be one of the application requirements like “book a reservation” or “add an item to a shopping cart”. This kind of functionality cannot be generalized to the communication system or its components/infrastructure (the “communication system” here refers to the network, the middleware, and anything providing infrastructure for applications to do their job):&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Therefore, providing that questioned function as a feature of the communication system itself is not possible.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;However, we can do things to the communication system to make parts of it reliable and generally assist in accomplishing a higher-order application requirement. We do these things to optimize an area so the application doesn’t have to worry about it “as much”, but it’s not something the application can ignore:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Sometimes an incomplete version of the function provided by the communication system may be useful as a performance enhancement&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;For example, in the Saltzer paper, they used the example of transferring a file from application A to application B:&lt;/p&gt; &lt;p&gt;&lt;img src="/images/end-to-end/file-transfer.png" alt="" /&gt;&lt;/p&gt; &lt;p&gt;What do we need to do (safety) to ensure the file gets delivered, in tact (correctness)? At any point in the diagram, things can fail: 1) the storage mechanism can have failed sectors/transposed bits/corruptionn, so when application A reads the file, it’s reading a faulty file; 2) the application could have a bug reading the file into memory or sending it out; 3) the network could mix up the byte ordering, duplicate parts of the file, etc. There are optimizations we can make, like using a more reliable transport like TCP or a message queue, but TCP doesn’t know the semantics of “delivering a file correctly” so the best we can hope for is at least when we put things on the network they’ll be delivered reliably.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/end-to-end/tcp-reliability.png" alt="" /&gt;&lt;/p&gt; &lt;p&gt;For full end-to-end correctness, we may need to use something like a file checksum that gets stored with the file on it’s initial write and then have B verify the checksum when it receives the file. However we choose to verify that the transfer took place correctly (implementation detail), the responsibility lies with the application to figure out the solution and to get it right, not TCP or a message queue.&lt;/p&gt; &lt;h2 id="what-are-typical-patterns-that-crop-up"&gt;What are typical patterns that crop up&lt;/h2&gt; &lt;p&gt;In an effort to solve for application correctness and safety in distributed applications, there are patterns that crop up that we can use. Earlier we mentioned some of the reliability patterns that Istio gives us, but those are not the only ones. Generally, there are two classes of patterns that crop up that we can use to assist building applications correctly and safely and both are related. I call those classes “Application Integration” and “Application Networking”. Both are the responsibility of the application. Let’s take a look:&lt;/p&gt; &lt;h3 id="application-integration"&gt;Application Integration&lt;/h3&gt; &lt;p&gt;These patterns crop up in the form of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Call sequencing, multicasting, and orchestration&lt;/li&gt; &lt;li&gt;Aggregate responses, transforming message semantics, splitting messages, etc&lt;/li&gt; &lt;li&gt;Atomicity, consistency issues, saga pattern&lt;/li&gt; &lt;li&gt;Anti-corruption layers, adapters, boundary transformations&lt;/li&gt; &lt;li&gt;Message retries, de-duplication/idempotency&lt;/li&gt; &lt;li&gt;Message re-ordering&lt;/li&gt; &lt;li&gt;Caching&lt;/li&gt; &lt;li&gt;Message-level routing&lt;/li&gt; &lt;li&gt;Retries, timeouts&lt;/li&gt; &lt;li&gt;Backend/legacy systems integration&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Using a simple example of “add an item to a shopping cart”, we can illustrate these concepts:&lt;/p&gt; &lt;p&gt;&lt;img src="/images/end-to-end/shopping-cart.png" alt="" /&gt;&lt;/p&gt; &lt;p&gt;When a user clicks “add to cart” they expect to see the item added to their shopping cart. In the system, this may involve coordinating calls/call sequencing to a recommendation engine (hey, we added this to the cart, wonder if we can compute recommended offers to go along with it), an inventory service, and others before we actually call the service to insert into the shopping cart. We need to be able to handle transforming the message to the different backends, dealing with failures (and rolling back any changes we initiated), and in each one of the services we need to be able to deal with duplicates. What if for some reason the call ends up being slow and the user clicks “add to cart” again? No amount of reliable infrastructure can save us from a user doing this; we need to detect and implement duplication checking/idempotent services.&lt;/p&gt; &lt;h3 id="application-networking"&gt;Application Networking&lt;/h3&gt; &lt;p&gt;These patterns come in the form of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;automatic retry&lt;/li&gt; &lt;li&gt;retry quota/budget&lt;/li&gt; &lt;li&gt;connection timeout&lt;/li&gt; &lt;li&gt;request timeout&lt;/li&gt; &lt;li&gt;client-side load balancing&lt;/li&gt; &lt;li&gt;circuit breaking&lt;/li&gt; &lt;li&gt;bulkheading&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;But also other complications of dealing with applications communicating over the network:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Canary rollout&lt;/li&gt; &lt;li&gt;Traffic routing&lt;/li&gt; &lt;li&gt;Metrics collection&lt;/li&gt; &lt;li&gt;Distributed tracing&lt;/li&gt; &lt;li&gt;Traffic shadowing&lt;/li&gt; &lt;li&gt;Fault injection&lt;/li&gt; &lt;li&gt;Health checking&lt;/li&gt; &lt;li&gt;Security&lt;/li&gt; &lt;li&gt;Organizational policy&lt;/li&gt; &lt;/ul&gt; &lt;h2 id="how-do-we-use-these-patterns"&gt;How do we use these patterns?&lt;/h2&gt; &lt;p&gt;In the past, we tried to commingle these areas of application responsibility. We would do things like shove everything into centralized infrastructure that was counted on to be basically 100% available (application networking + application integration). We put application concerns into this centralized infrastructure (which was supposed to make us more agile) but then suffered bottlenecks and rigidness when it came to making changes to applications quickly. These dynamics manifested in the way we implemented Enterprise Service Bus:&lt;/p&gt; &lt;p&gt;&lt;img src="/images/end-to-end/esb-commingle.png" alt="" /&gt;&lt;/p&gt; &lt;p&gt;Alternatively, I believe the big clouds (Netflix, Amazon, Twitter, etc) recognized this “application responsibility” aspect to these patterns and just commingled the application networking code into the application. Think things like Netflix OSS where we had different libraries for circuit breaking, client-side load balancing, service discovery, etc.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/end-to-end/netflix-commingle.png" alt="" /&gt;&lt;/p&gt; &lt;p&gt;As you know, Netflix OSS libraries around application networking were very Java focused. As organizations started to adopt Netflix OSS and derivatives like spring-cloud-netflix, they met head on with the fact that operationalizing an architecture like that became prohibitive as soon as you started adding other languages. Netflix had the maturity and automation in place to pull it off, other organizations are not Netflix. Some of the problems when trying to operationalize application libraries and frameworks that solve the application-networking spectrum of problems:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Each language/framework has its own implementation of these concerns&lt;/li&gt; &lt;li&gt;The implementations won’t be 100% exactly the same; they’ll vary, differ, and sometimes be wrong&lt;/li&gt; &lt;li&gt;How do you manage, update, patch these libraries? ie, lifecycle management&lt;/li&gt; &lt;li&gt;These libraries muddy up the logic of the application&lt;/li&gt; &lt;li&gt;Lots of trust in developers implementing the basics correctly&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Istio and service mesh in general aim to solve the application-networking class of problems. Moving the solution to these problems to the service mesh is an &lt;em&gt;optimization&lt;/em&gt; for operability. This does not mean it’s not the application’s responsibility anymore, it just means the implementation of these capabilities exist out of process and must be configured.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/end-to-end/layers.png" alt="" /&gt;&lt;/p&gt; &lt;p&gt;By doing so, we can optimize operability by doing the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;One single implementation of these capabilities everywhere&lt;/li&gt; &lt;li&gt;Consistent functionality&lt;/li&gt; &lt;li&gt;Correct functionality&lt;/li&gt; &lt;li&gt;Programmable by both application operators and application developers&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Istio and service mesh don’t allow you to offload responsibility to the infrastructure, they just add some level of reliability and optimize for reliability. Just like in the end-to-end argument, TCP doesn’t allow you to offload application responsibilities.&lt;/p&gt; &lt;p&gt;Istio helps with application networking reliability and for developers there’s a myriad of frameworks to help with the application-integration aspects. My favorite for Java developers is &lt;a href="https://github.com/apache/camel"&gt;Apache Camel&lt;/a&gt; which provides a lot of the pieces needed to write correct and safe applications including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=""&gt;Call sequencing, multicasting, and orchestration&lt;/a&gt;&lt;/li&gt; &lt;li&gt;[]Aggregate responses, transforming message semantics, splitting messages, etc](https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/aggregate-eip.adoc)&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/saga-eip.adoc"&gt;Atomicity, consistency issues, saga pattern&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/apache/camel/blob/master/components/readme.adoc"&gt;Anti-corruption layers, adapters, boundary transformations&lt;/a&gt;&lt;/li&gt; &lt;li&gt;[]Message retries, de-duplication/idempotency](https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/idempotentConsumer-eip.adoc)&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/resequence-eip.adoc"&gt;Message reordering&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Caching&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/content-based-router-eip.adoc"&gt;Message-level routing&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Retries, timeouts&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/apache/camel/blob/master/components/readme.adoc"&gt;Backend/legacy systems integration&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src="/images/end-to-end/layers-camel.png" alt="" /&gt;&lt;/p&gt; &lt;h2 id="what-about-smart-endpoints-dumb-pipes"&gt;What about smart endpoints dumb pipes&lt;/h2&gt; &lt;p&gt;So with respect to microservices, a friend of mine posed a question regarding the catchy but simplistic “smart endpoints and dump pipes” phrase regarding microservices and how does “making the infrastructure smarter” affect that premise:&lt;/p&gt; &lt;p&gt;&lt;img src="/images/end-to-end/twitter.png" alt="" /&gt;&lt;/p&gt; &lt;p&gt;The answer I gave was:&lt;/p&gt; &lt;p&gt;&lt;img src="/images/end-to-end/twitter2.png" alt="" /&gt;&lt;/p&gt; &lt;p&gt;The pipes are still dumb; we’re not coercing application logic about application correctness and safety into the infrastructure by using a service mesh. We’re simply making it more reliable, optimizing for operational aspects, and simplifying what the application has to &lt;em&gt;implement&lt;/em&gt; not be responsible for. Feel free to leave comments or reach out on twitter &lt;a href="http://twitter.com/christianposta"&gt;@christianposta&lt;/a&gt; if you disagree or have additional thoughts.&lt;/p&gt; &lt;p&gt;&lt;a href="http://blog.christianposta.com/microservices/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/"&gt;Application Safety and Correctness Cannot Be Offloaded to Istio or Any Service Mesh&lt;/a&gt; was originally published by Christian Posta at &lt;a href="http://blog.christianposta.com"&gt;Software Blog&lt;/a&gt; on August 10, 2018.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/H1EdyqP3sQE" height="1" width="1" alt=""/&gt;</content><summary>I’ve recently started giving a talk about the evolution of integration and the adoption of service mesh, specifically Istio. I’ve been excited about Istio ever since I first heard about it back in January 2017; in fact I’ve been excited about this new wave of technology helping to make microservices and cloud-native architectures a possibility for organizations. Maybe you can tell, as I’ve been wr...</summary><dc:creator>christian posta</dc:creator><dc:date>2018-08-10T13:18:34Z</dc:date><feedburner:origLink>http://blog.christianposta.com/microservices/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/</feedburner:origLink></entry><entry><title>Firewalld: The Future is nftables</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ppD0T8nwncQ/" /><category term="Community" /><category term="Security" /><category term="community" /><category term="Fedora" /><category term="Firewall" /><category term="firewalld" /><category term="nftables" /><author><name>Eric Garver</name></author><id>https://developers.redhat.com/blog/?p=512017</id><updated>2018-08-10T11:00:07Z</updated><published>2018-08-10T11:00:07Z</published><content type="html">&lt;p&gt;Firewalld, the default firewall management tool in Red Hat Enterprise Linux and Fedora, has gained long sought support for nftables. This was announced in detail on firewalld&amp;#8217;s project &lt;a href="https://firewalld.org/2018/07/nftables-backend" target="_blank" rel="noopener"&gt;blog&lt;/a&gt;. The feature landed in the firewalld 0.6.0 release as the new default firewall backend.&lt;/p&gt; &lt;p&gt;The benefits of nftables have been outlined on the Red Hat Developer Blog:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2016/10/28/what-comes-after-iptables-its-successor-of-course-nftables/"&gt;What comes after iptables? Its successor, of course: nftables&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/04/11/benchmarking-nftables/"&gt;Benchmarking nftables&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/01/10/migrating-my-iptables-setup-to-nftables/"&gt;Migrating my iptables setup to nftables&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;There are many longstanding issues with firewalld that we can address with nftables that were not possible with the old iptables backend. The nftables backend allows the following improvements:&lt;/p&gt; &lt;p&gt;&lt;span id="more-512017"&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;all firewall information viewable with a single underlying tool, nft&lt;/li&gt; &lt;li&gt;single rule for both IPv4 and IPv6 instead of duplicating rules&lt;/li&gt; &lt;li&gt;does not assume complete control of firewall backend&lt;/li&gt; &lt;li&gt;won&amp;#8217;t delete firewall rules installed by other tools or users&lt;/li&gt; &lt;li&gt;rule optimizations (log and deny in same rule)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Most important of all, the new backend is nearly 100% compatible with preexisting configurations. Most users won&amp;#8217;t even notice something changed. This means even slower moving distributions should be able to pick up the new version.&lt;/p&gt; &lt;p&gt;You can get started with firewalld and nftables today! firewalld 0.6.0 is already available in Fedora rawhide and will be in the upcoming Fedora 29 release. Existing Fedora installs will automatically be upgraded to the nftables backend when they upgrade to Fedora 29.&lt;/p&gt; &lt;p&gt;Unfortunately firewalld&amp;#8217;s nftables backend is unlikely to find it&amp;#8217;s way to Red Hat Enterprise Linux 7. The good news is since Fedora is RHEL&amp;#8217;s upstream it is likely that the nftables backend will eventually make it into some future RHEL release.&lt;/p&gt; &lt;p&gt;For further details please refer to the upstream &lt;a href="https://firewalld.org/2018/07/nftables-backend" target="_blank" rel="noopener"&gt;blog post&lt;/a&gt; on &lt;a href="https://firewalld.org/"&gt;firewalld.org&lt;/a&gt;. Happy firewalling!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F10%2Ffirewalld-the-future-is-nftables%2F&amp;#38;linkname=Firewalld%3A%20The%20Future%20is%20nftables" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F10%2Ffirewalld-the-future-is-nftables%2F&amp;#38;linkname=Firewalld%3A%20The%20Future%20is%20nftables" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F10%2Ffirewalld-the-future-is-nftables%2F&amp;#38;linkname=Firewalld%3A%20The%20Future%20is%20nftables" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F10%2Ffirewalld-the-future-is-nftables%2F&amp;#38;linkname=Firewalld%3A%20The%20Future%20is%20nftables" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F10%2Ffirewalld-the-future-is-nftables%2F&amp;#38;linkname=Firewalld%3A%20The%20Future%20is%20nftables" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F10%2Ffirewalld-the-future-is-nftables%2F&amp;#38;linkname=Firewalld%3A%20The%20Future%20is%20nftables" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F10%2Ffirewalld-the-future-is-nftables%2F&amp;#38;linkname=Firewalld%3A%20The%20Future%20is%20nftables" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F10%2Ffirewalld-the-future-is-nftables%2F&amp;#38;linkname=Firewalld%3A%20The%20Future%20is%20nftables" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F10%2Ffirewalld-the-future-is-nftables%2F&amp;#38;title=Firewalld%3A%20The%20Future%20is%20nftables" data-a2a-url="https://developers.redhat.com/blog/2018/08/10/firewalld-the-future-is-nftables/" data-a2a-title="Firewalld: The Future is nftables"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/10/firewalld-the-future-is-nftables/"&gt;Firewalld: The Future is nftables&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ppD0T8nwncQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Firewalld, the default firewall management tool in Red Hat Enterprise Linux and Fedora, has gained long sought support for nftables. This was announced in detail on firewalld&amp;#8217;s project blog. The feature landed in the firewalld 0.6.0 release as the new default firewall backend. The benefits of nftables have been outlined on the Red Hat Developer [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/10/firewalld-the-future-is-nftables/"&gt;Firewalld: The Future is nftables&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/08/10/firewalld-the-future-is-nftables/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">512017</post-id><dc:creator>Eric Garver</dc:creator><dc:date>2018-08-10T11:00:07Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/10/firewalld-the-future-is-nftables/</feedburner:origLink></entry><entry><title>RESTEasy release week</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/hQM_rxOrbRw/resteasy-release-week" /><category term="feed_group_name_resteasy" scheme="searchisko:content:tags" /><category term="feed_name_resteasy" scheme="searchisko:content:tags" /><category term="JAX-RS" scheme="searchisko:content:tags" /><category term="resteasy" scheme="searchisko:content:tags" /><category term="springboot" scheme="searchisko:content:tags" /><author><name>Alessio Soldano</name></author><id>searchisko:content:id:jbossorg_blog-resteasy_release_week</id><updated>2018-08-09T22:48:46Z</updated><published>2018-08-09T22:48:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:6e6604c1-0bdd-4a42-8fff-792ea8305dfa] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;It's been a busy week... but before leaving for the week-end I owe you an update ;-) Three new releases have been completed in the last days:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310560&amp;amp;version=12337962" rel="nofollow"&gt;RESTEasy 3.6.1.Final&lt;/a&gt;, first maintenance release of the 3.6 series, will be shipped in next WildFly 14;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://issues.jboss.org/secure/ReleaseNote.jspa?version=12337963&amp;amp;projectId=12310560" rel="nofollow"&gt;RESTEasy 4.0.0.Beta5&lt;/a&gt;, latest step towards RESTEasy 4, cleans up a bunch of deprecated / old classes;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://issues.jboss.org/secure/ReleaseNote.jspa?version=12338799&amp;amp;projectId=12310560" rel="nofollow"&gt;resteasy-spring-boot-starter 2.0.1.Final&lt;/a&gt;, upgrades to latest RESTEasy core and Spring Boot (2.0.4.RELEASE).&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;As usual, give them a try while they're hot, feedback is welcome!&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:6e6604c1-0bdd-4a42-8fff-792ea8305dfa] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/hQM_rxOrbRw" height="1" width="1" alt=""/&gt;</content><summary>It's been a busy week... but before leaving for the week-end I owe you an update ;-) Three new releases have been completed in the last days: RESTEasy 3.6.1.Final, first maintenance release of the 3.6 series, will be shipped in next WildFly 14; RESTEasy 4.0.0.Beta5, latest step towards RESTEasy 4, cleans up a bunch of deprecated / old classes; resteasy-spring-boot-starter 2.0.1.Final, upgrades to ...</summary><dc:creator>Alessio Soldano</dc:creator><dc:date>2018-08-09T22:48:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/community/resteasy/blog/2018/08/09/resteasy-release-week</feedburner:origLink></entry><entry><title>This week in JBoss, 9th of August 2018 - Pushing Through The Heat Wave</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/DodX5xi3cdo/this-week-in-jboss-9th-of-august-2018-pushing-through-the-heat-wave" /><category term="agile" scheme="searchisko:content:tags" /><category term="camel route" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="datagrid" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="github" scheme="searchisko:content:tags" /><category term="GraalVM" scheme="searchisko:content:tags" /><category term="hibernate-orm" scheme="searchisko:content:tags" /><category term="jbpm development" scheme="searchisko:content:tags" /><category term="js" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="OpenShift.io" scheme="searchisko:content:tags" /><category term="opensource" scheme="searchisko:content:tags" /><category term="polyglot" scheme="searchisko:content:tags" /><category term="resteasy" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><category term="slack" scheme="searchisko:content:tags" /><category term="springboot" scheme="searchisko:content:tags" /><author><name>Romain Pelisse</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_9th_of_august_2018_pushing_through_the_heat_wave</id><updated>2018-08-09T17:08:40Z</updated><published>2018-08-09T17:08:40Z</published><content type="html">&lt;!-- [DocumentBodyStart:0e9c4028-3a19-478d-b57a-757ef9d6f1d6] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;&lt;em&gt;If you are, like me, in Europe now, you must know that it is (ridiculously) hot right now... But despite this heat wave of a sort, the JBoss community, as always, have been pretty busy in the last two weeks - certainly leveraging the relative quiteness of the summer season, to get some "things done". Let's take a look at you may have missed in the recent days...&lt;/em&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.flickr.com/photos/rykneethling/4507765828/in/photolist-7SktJu-dfDvAK-26m2n7U-cpjodS-bK16kT-9D4oRG-6x8uGt-9nnkGN-aR5E5T-2WMwR-9zWc46-boo5e7-bWGmsF-aoTzep-9LU67Q-SdA9fC-G77pVS-boovvm-cuKVzW-oJkop6-fxKVdz-572JK4-7tV11j-cxEs8W-9D4oed-5Qrok-2tsxe-4NjRGX-rtVmFL-emovNn-6QbvJ1-9pLNq1-29iDWw2-9fmXog-dZG6Qy-c31QVJ-hyu3xf-f7NFw-dTVWBC-6wgwX6-4x477r-4x3WWZ-7Bx6Ez-M36sb1-7v4Vpj-hjz8UF-f5Q1Ya-fx3Buz-cKrggo-bBit8B" rel="nofollow"&gt;&lt;img alt="Fan" height="160" src="https://farm3.staticflickr.com/2053/4507765828_b1ff117f12_m.jpg" style="display: block; margin-left: auto; margin-right: auto;" width="240"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Techbytes&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Let's start with some high level consideration by checking out this new article called&amp;#160; &lt;a class="jive-link-external-small" href="http://www.ofbizian.com/2018/08/from-agile-to-serverless-and-beyond.html" rel="nofollow"&gt;From Agile to Serverless&lt;/a&gt;. Indeed, as the buzz around "serverless" is growing up, I though it might be a good idea to remember a bit how we ended up here &lt;span aria-label="Wink" class="emoticon-inline emoticon_wink" style="height:16px;width:16px;"&gt;&lt;/span&gt;!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.flickr.com/photos/cannon_s5_is/8118850048/in/photolist-dnregf-K6Ayfr-rmtvyS-pj975Z-G3dRjc-eGwwPc-dDNTdZ-28t4jJ6-298Gxdo-Z8kL71-pMb1M1-22goTg1-qP7MUw-kWPrrA-9CrZ2J-qKbBE2-8WCUxw-aYmDKg-phX2p7-rxZVV8-UPtD8a-5kJ8aT-KMgEg2-eJGDaC-nQ5Nrw-2471AeE-26Gg3Ud-24gobDU-iJEGxH-7aRjYG-25ciG8F-g4zUBH-KaXgJ6-21VLM7f-6aydnV-ad8Gim-23ZADbh-WAyWbD-qxuPow-fMkwZA-EyLadE-9D9FrL-25b9PGL-nDJrf6-276dFHU-23pV1aA-27fonCp-26nz3wt-SGcDWR-23BdpU4" rel="nofollow"&gt;&lt;img alt="Zig Zag" height="160" src="https://farm9.staticflickr.com/8055/8118850048_2e28443857_m.jpg" style="display: block; margin-left: auto; margin-right: auto;" width="240"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Deploying application inside Openshift is certainly a big trend of the last year. Indeed, one of the core functionality of Openshift - autoscaling, can be the key to success, but is also not so easy to implement. So you certainly want to take look at this quite good article on &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/08/08/autoscaling-red-hat-cache-service/" rel="nofollow"&gt;Autoscaling the Red Hat Cache Service on OpenShift&lt;/a&gt;. (and if you wonder, Red Hat Cache Service is based on Infinispan &lt;span aria-label="Wink" class="emoticon-inline emoticon_wink" style="height:16px;width:16px;"&gt;&lt;/span&gt; ).&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;If there is something that many of us like, as being both developer and member of JBoss Community, is to find way for products to integrate in way that match our way of working - rather than being forced to use a tool in a certain way. So, for instance, if you do not like XML, but love to work with Camel, you need to check up this little article on &lt;a class="jive-link-external-small" href="https://lburgazzoli.github.io/2018/07/29/Polyglot-Camel-Routes.html" rel="nofollow"&gt;Polyglot Camel Routes&lt;/a&gt;. Along the same lines, if you have to work with JS but would like to be able to use Java instead, take a look at the following article: &lt;a class="jive-link-external-small" href="https://lburgazzoli.github.io/2018/08/06/Adventures-in-GraalVM-invoke-Java-code-from-JS-in-native-image.html" rel="nofollow"&gt;Adventures in GraalVM: invoke Java code from JS in native-image&lt;/a&gt;&lt;/p&gt;&lt;p&gt;. Last, but not the least, let's take a quick look at how &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/08/06/setting-up-rbac-on-red-hat-amq-broker/" rel="nofollow"&gt;How to set up RBAC on Red Hat AMQ Broker&lt;/a&gt;!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Community&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The JBoss community encompasses several other ones and one of the most thriving is certainly the Hibernate community. And the best way to keep up with this one is to check out their &lt;a class="jive-link-external-small" href="http://in.relation.to/2018/08/09/hibernate-community-newsletter-2018-15/" rel="nofollow"&gt;Hibernate Community Newsletter 15/2018&lt;/a&gt;. One of the main feature of this month entry is the interview of one of the developer: &lt;a class="jive-link-external-small" href="http://in.relation.to/2018/08/07/meet-jan-willem-gmelig-meyling/" rel="nofollow"&gt;Meet Jan-Willem Gmelig Meyling&lt;/a&gt;.&lt;/p&gt;&lt;p class="active_link" style="min-height: 8pt; padding: 0px;" title="http://in.relation.to/2018/08/09/hibernate-community-newsletter-2018-15/"&gt;&amp;#160;&lt;/p&gt;&lt;p class="active_link" title="http://in.relation.to/2018/08/09/hibernate-community-newsletter-2018-15/"&gt;An other interesting item, regarding the community at large, is this article on &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/07/27/collaboration-in-open-source-license-enforcement-a-community-movement-is-happening/" rel="nofollow"&gt;Collaboration in open source license enforcement - a community movement is happening&lt;/a&gt;. Please do check it out, it's pretty interesting to see what is happening lately on this front!&lt;/p&gt;&lt;p class="active_link" style="min-height: 8pt; padding: 0px;" title="http://in.relation.to/2018/08/09/hibernate-community-newsletter-2018-15/"&gt;&amp;#160;&lt;/p&gt;&lt;h2 class="active_link" title="http://in.relation.to/2018/08/09/hibernate-community-newsletter-2018-15/"&gt;Evangelist's Corner&lt;/h2&gt;&lt;h2&gt;&lt;/h2&gt;&lt;p&gt;As always, our own Eric D. Schabell has been quite productive in the last two weeks and released not one, but two articles on Opensource.com: &lt;a class="jive-link-external-small" href="https://opensource.com/article/18/8/data-risky-cloud" rel="nofollow"&gt;What data is too risky for the cloud?&lt;/a&gt; and &lt;a class="jive-link-external-small" href="https://opensource.com/article/18/7/why-you-cant-move-everything-cloud" rel="nofollow"&gt;Why you can't move everything to the cloud&lt;/a&gt;. On top of those articles, he also released the fourth part of his ongoing series for DZone on &lt;a class="jive-link-external-small" href="https://dzone.com/articles/3-pitfalls-everyone-should-avoid-with-hybrid-multi-5" rel="nofollow"&gt;3 Pitfalls Everyone Should Avoid With Hybrid Multi-Cloud (Part 4)&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Releases, releases, releases...&lt;/h2&gt;&lt;p&gt;As alwasy, the last past two weeks have seen their fair share of releases - so here is a small recap:&lt;/p&gt;&lt;ul&gt;&lt;li class="active_link" title="https://blog.infinispan.org/2018/08/infinispan-users-we-have-just-released-9.html"&gt;&lt;a class="jive-link-external-small" href="https://blog.infinispan.org/2018/08/infinispan-users-we-have-just-released-9.html Infinispan 9.4.0.Beta1 is out!" rel="nofollow"&gt;Infinispan 9.4.0.Beta1 is out!&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://www.ofbizian.com/2018/08/from-agile-to-serverless-and-beyond.html" rel="nofollow"&gt;Keycloak: Keycloak 4.2.0.Final released&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://blog.keycloak.org/2018/08/keycloak-421final-released.html" rel="nofollow"&gt;Keycloak: Keycloak 4.2.1.Final released&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2018/08/02/hibernate-orm-534-final-out/" rel="nofollow"&gt;Hibernate ORM 5.3.4.Final released - In Relation To&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-blog-small" data-containerId="1100" data-containerType="37" data-objectId="6217" data-objectType="38" href="https://developer.jboss.org/community/resteasy/blog/2018/07/31/resteasy-spring-boot-starter-200final"&gt;RESTEasy Spring Boot starter 2.0.0.Final&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Decaf'&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The JBoss community and products are not living in their own little planet and there is all action happening around them that you may like to be aware of. Openshift being a rising interest in the Java world, it's certainly make sense to know about the &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/08/03/okd-renaming-of-openshift-origin-with-3-10-release/" rel="nofollow"&gt;Renaming of OpenShift Origin with 3.10 release&lt;/a&gt;. Also of interest for the Java developer would be those the two next articles. The first one cover the not so easy topic of &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/08/02/container-native-integration-testing/" rel="nofollow"&gt;Container-native integration testing&lt;/a&gt;&lt;/p&gt;&lt;p&gt;and the second adresses the problematic of &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/07/30/natively-compile-java-code-for-better-startup-time/" rel="nofollow"&gt;Natively compile Java code for better startup time&lt;/a&gt;. Both are certainly worth checking out!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;span style="font-weight: inherit; font-family: inherit;"&gt;&lt;em&gt;Hopefully, you have found something in this week's editorial to pique your interest and give you something to explore while waiting for next week's installment. Join us here next week for more news from the JBoss Community.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:0e9c4028-3a19-478d-b57a-757ef9d6f1d6] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/DodX5xi3cdo" height="1" width="1" alt=""/&gt;</content><summary>If you are, like me, in Europe now, you must know that it is (ridiculously) hot right now... But despite this heat wave of a sort, the JBoss community, as always, have been pretty busy in the last two weeks - certainly leveraging the relative quiteness of the summer season, to get some "things done". Let's take a look at you may have missed in the recent days...   Techbytes   Let's start with some...</summary><dc:creator>Romain Pelisse</dc:creator><dc:date>2018-08-09T17:08:40Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2018/08/09/this-week-in-jboss-9th-of-august-2018-pushing-through-the-heat-wave</feedburner:origLink></entry><entry><title>Shift Developer Conference 2018 - How to Jump Start a Career in Open Source (video)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/H2zCLGE-I1M/shift-dev-2018-howto-jump-start-career-in-opensource-video.html" /><category term="conference" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-shift_developer_conference_2018_how_to_jump_start_a_career_in_open_source_video</id><updated>2018-08-09T12:38:43Z</updated><published>2018-08-09T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;a href="https://4.bp.blogspot.com/-CNelZrWyTIc/WxArd9Dlp3I/AAAAAAAAsro/-bwJNOsm-NAIiTVbfde9RKM7CEblZUQfgCLcBGAs/s1600/shiftdev2018.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="shift developer" border="0" data-original-height="530" data-original-width="967" height="175" src="https://4.bp.blogspot.com/-CNelZrWyTIc/WxArd9Dlp3I/AAAAAAAAsro/-bwJNOsm-NAIiTVbfde9RKM7CEblZUQfgCLcBGAs/s320/shiftdev2018.png" title="" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;As &lt;a href="http://www.schabell.org/2018/05/shift-dev-2018-howto-jump-start-career-in-opensource.html" target="_blank"&gt;previously posted&lt;/a&gt;, I spent this week at the largest developer conference in Southeast Europe, known as the Shift Developer Conference 2018.&lt;br /&gt;&lt;br /&gt;I gave a talk on the soft skill side of development, suggesting some ways to jump start a career in open source. I did not mention coding, pull requests or even suggest to join a coding project. It's more subtle than the obvious components one would expect in such a topic.&lt;br /&gt;&lt;br /&gt;My career in open source has been a long one and I think I've got a few good tips, tricks and pieces of advice based on what's worked on this long and wonderful journey.&lt;br /&gt;&lt;br /&gt;After the event &lt;a href="http://www.schabell.org/2018/06/shift-dev-2018-howto-jump-start-career-in-opensource-slides.html" target="_blank"&gt;slides were posted&lt;/a&gt;. The only item missing was the on-site video recording of my session. The organizers posted that today, so here you go.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;As a bit of a review, the abstract:&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;a href="https://shiftconf.co/#schedule" target="_blank"&gt;How To Jump Start a Career in Open Source&lt;/a&gt;&lt;/h3&gt;&lt;i&gt;It's not magic. It's not luck. It's not going to happen by itself, so what's the secret sauce? Understanding what makes a career in open source grow, what choices are crucial, and what actions accelerate or damage your open source future are sometimes hard to grasp. Learning to position, expand and grow your personal brand in the open source world is what this session provides. Be ready for your next step in open source. Join me for an hour of power where you'll be given a clear and easy to use plan for jump starting your open source career immediately.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;The video:&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allow="autoplay; encrypted-media" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/-_ZgfmnL9bM" width="560"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Hope you enjoyed the talk, see you again next time!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=9eShmwYxRq0:rkIEP8cEb8o:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=9eShmwYxRq0:rkIEP8cEb8o:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=9eShmwYxRq0:rkIEP8cEb8o:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=9eShmwYxRq0:rkIEP8cEb8o:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=9eShmwYxRq0:rkIEP8cEb8o:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=9eShmwYxRq0:rkIEP8cEb8o:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=9eShmwYxRq0:rkIEP8cEb8o:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=9eShmwYxRq0:rkIEP8cEb8o:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=9eShmwYxRq0:rkIEP8cEb8o:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=9eShmwYxRq0:rkIEP8cEb8o:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=9eShmwYxRq0:rkIEP8cEb8o:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/9eShmwYxRq0" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/H2zCLGE-I1M" height="1" width="1" alt=""/&gt;</content><summary>As previously posted, I spent this week at the largest developer conference in Southeast Europe, known as the Shift Developer Conference 2018. I gave a talk on the soft skill side of development, suggesting some ways to jump start a career in open source. I did not mention coding, pull requests or even suggest to join a coding project. It's more subtle than the obvious components one would expect ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-08-09T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/9eShmwYxRq0/shift-dev-2018-howto-jump-start-career-in-opensource-video.html</feedburner:origLink></entry><entry><title>Hibernate Community Newsletter 15/2018</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/D6Qi6So2-nQ/" /><category term="Discussions" scheme="searchisko:content:tags" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate ORM" scheme="searchisko:content:tags" /><category term="newsletter" scheme="searchisko:content:tags" /><author><name>Vlad Mihalcea</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_community_newsletter_15_2018</id><updated>2018-08-13T13:38:40Z</updated><published>2018-08-09T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Welcome to the Hibernate community newsletter in which we share blog posts, forum, and StackOverflow questions that are especially relevant to our users.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="interviews"&gt;&lt;a class="anchor" href="#interviews"&gt;&lt;/a&gt;Interviews&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Don’t miss our Hibernate developer interview with &lt;a href="http://in.relation.to/2018/08/07/meet-jan-willem-gmelig-meyling/"&gt;Jan-Willem Gmelig Meyling&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you want to share your story about Hibernate, let us know, and we can share it with our huge community of passionate developers.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="articles"&gt;&lt;a class="anchor" href="#articles"&gt;&lt;/a&gt;Articles&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Ikhiloya Imokhai explains &lt;a href="https://medium.com/skillhive/how-to-retrieve-a-parent-field-from-a-child-entity-in-a-one-to-many-bidirectional-jpa-relationship-4b3cd707bfb7"&gt;how to implement a REST service to fetch entities that form a bidirectional JPA relationship when using Spring Boot&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Since cloud computing becomes more and more popular, the need for database multitenancy becomes even more obvious. &lt;a href="https://vladmihalcea.com/database-multitenancy/"&gt;This article&lt;/a&gt; is a short introduction to database multitenancy, and explains how you can achieve it at catalog, schema or table level.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Hibernate Validator is the reference implementation of the Bean Validation specification, and it allows you to decouple the domain model validation logic from the business one. For more details, check out &lt;a href="https://howtodoinjava.com/hibernate/hibernate-validator-java-bean-validation/"&gt;this introductory tutorial&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For our Czech readers, &lt;a href="https://www.zdrojak.cz/clanky/java-na-webovem-serveru-prace-s-databazi-ii/"&gt;this tutorial&lt;/a&gt; shows you how to write data access code using both the Hibernate and the Spring JdbcTemplate.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In &lt;a href="http://www.kodnito.com/posts/microprofile-rest-api-with-mongodb-hibernate-ogm-and-thorntail/"&gt;this article&lt;/a&gt;, Hayri Cicek explains how to develop a MicroProfile REST API with MongoDB, Hibernate OGM and Thorntail (previously known as WildFly Swarm).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When using JPA inheritance, you might want to restrict a given polymorphic query to fetch only a subset of subclasses. &lt;a href="https://vladmihalcea.com/query-entity-type-jpa-criteria-api/"&gt;This article&lt;/a&gt; explains how you can achieve this goal when using the JPA Criteria API.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you want to retrieve the underlying database connection when using Hibernate, &lt;a href="https://www.thoughts-on-java.org/hibernate-tips-get-the-sql-connection-used-by-your-hibernate-session/"&gt;this article&lt;/a&gt; explains how to do so.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="time-to-upgrade"&gt;&lt;a class="anchor" href="#time-to-upgrade"&gt;&lt;/a&gt;Time to upgrade&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;There were several Hibernate project releases since the last newsletter:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://in.relation.to/2018/07/24/hibernate-orm-533-final-out/"&gt;Hibernate ORM 5.3.3&lt;/a&gt; and &lt;a href="http://in.relation.to/2018/08/02/hibernate-orm-534-final-out/"&gt;Hibernate ORM 5.3.4&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://in.relation.to/2018/07/25/hibernate-search-5-10-3-Final/"&gt;Hibernate Search 5.10.3&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="questions-and-answers"&gt;&lt;a class="anchor" href="#questions-and-answers"&gt;&lt;/a&gt;Questions and answers&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/get-detatchedcriteria-for-specific-class/1151/2"&gt;Filter entities by a specific subclass type using Criteria&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/how-to-fetch-one-side-of-a-many-to-many-association-while-on-the-other-side-all-records-match-a-given-filtering-criteria/1095"&gt;How to fetch one side of a many-to-many association while on the other side all records match a given filtering criteria&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/31725820/hql-returning-timestamp-for-given-timezone/31741171#31741171"&gt;How to use the MySQL CONVERT_TZ function in a JPQL or HQL query&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/limit-clause-is-not-working-in-jpa-named-queries/1112"&gt;LIMIT clause is not working in JPA Named Queries &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/how-i-can-create-select-from-select-query/1156"&gt;How can I create SELECT FROM SELECT query with JPA and Hibernate? &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/how-to-fetch-a-transient-property-from-the-database-using-jpa-and-hibernate/1160"&gt;How to fetch a @Transient property from the database using JPA and Hibernate?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/how-to-get-the-default-transaction-isolation-level-using-hibernate-api/1165"&gt;How to get the default transaction isolation level using Hibernate API&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/criteriaimpl-and-stream/1144"&gt;How to call stream() on the Hibernate CriteriaImpl object&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/sqlquery-and-org-hibernate-query-are-deprecated-what-to-use-instead/1179"&gt;SQLQuery and org.hibernate.Query are deprecated. What to use instead?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/25893476/can-you-have-multiple-transactions-within-one-hibernate-session/26026394#26026394"&gt;Can you have multiple transactions within one Hibernate Session?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/34371128/jpa-2-0how-to-fetch-whole-of-entity-graph/34374600#34374600"&gt;How to fetch a whole entity graph using JPA&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/11938253/whats-the-difference-between-joincolumn-and-mappedby-when-using-a-jpa-onetoma/51055434#51055434"&gt;What’s the difference between &lt;code&gt;@JoinColumn&lt;/code&gt; and &lt;code&gt;mappedBy&lt;/code&gt; when using a JPA &lt;code&gt;@OneToMany&lt;/code&gt; association&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/23708905/application-cache-v-s-hibernate-second-level-cache-which-to-use/23710646#23710646"&gt;Application cache v.s. Hibernate second-level cache, which one to use?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/25047226/jpa-generationtype-auto-not-considering-column-with-auto-increment/25052275#25052275"&gt;JPA GenerationType.AUTO not considering column with auto increment&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/25746509/hibernate-nativequery-transaction/25830441#25830441"&gt;How to run native SQL queries in the same Hibernate transaction?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/D6Qi6So2-nQ" height="1" width="1" alt=""/&gt;</content><summary>Welcome to the Hibernate community newsletter in which we share blog posts, forum, and StackOverflow questions that are especially relevant to our users. Interviews Don’t miss our Hibernate developer interview with Jan-Willem Gmelig Meyling. If you want to share your story about Hibernate, let us know, and we can share it with our huge community of passionate developers. Articles Ikhiloya Imokhai ...</summary><dc:creator>Vlad Mihalcea</dc:creator><dc:date>2018-08-09T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/08/09/hibernate-community-newsletter-2018-15/</feedburner:origLink></entry></feed>
